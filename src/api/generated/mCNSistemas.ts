/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * MCN Sistemas
 * E-commerce | Pedido Externo
 * OpenAPI spec version: 1.0.0
 */
import useSWR from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  AuditoriaDto,
  AutenticacaoDto,
  BannerDto,
  CarrinhoDto,
  ClienteDto,
  ClienteVendedorDto,
  CondicaoPagamentoClienteDto,
  CondicaoPagamentoDto,
  ContratoAgrupadoDto,
  ContratoDto,
  DashboardDiaDto,
  DeleteApiClienteParams,
  DeleteApiCondpgtoCondpgtoclienteParams,
  DeleteApiCondpgtoParams,
  DeleteApiEcommerceUsuarioEnderecoParams,
  DeleteApiEstoqueParams,
  DeleteApiFichafinanceiraParams,
  DeleteApiHistoricovendaParams,
  DeleteApiListacasamentoParams,
  DeleteApiListacasamentoSaldoParams,
  DeleteApiPrecoParams,
  DeleteApiPrecoTabelaprecoParams,
  DeleteApiProdutoCompostoParams,
  DeleteApiProdutoConversaoParams,
  DeleteApiProdutoParams,
  DeleteApiPromocaoCondpgtoParams,
  DeleteApiPromocaoEmpresaParams,
  DeleteApiPromocaoParams,
  DeleteApiPromocaoProdutoParams,
  DeleteApiTransportadoraParams,
  DeleteApiUsuarioParams,
  DeleteApiVendedorMetaParams,
  DescricaoDto,
  EmailDto,
  EmpresaBannerDto,
  EmpresaDto,
  EstoqueDto,
  FichaFinanceiraDto,
  FilialEcommerceDto,
  FormaPgtoEcommerceDto,
  FreteDto,
  GetApiAuditoriaParams,
  GetApiClienteParams,
  GetApiClienteVendedorParams,
  GetApiCondpgtoCondpgtoclienteParams,
  GetApiCondpgtoParams,
  GetApiDashboardecommerceClientesParams,
  GetApiDashboardecommercePedidosfechadosParams,
  GetApiDashboardecommercePedidospedentesParams,
  GetApiEcommerceAdministradorParams,
  GetApiEcommerceFreteParams,
  GetApiEcommerceParametroParams,
  GetApiEcommerceRegiaoatendidaParams,
  GetApiEcommerceRegiaoatendidacepParams,
  GetApiEcommerceUsuarioExisteParams,
  GetApiEcommerceUsuarioRecuperarParams,
  GetApiEmpresaBannerParams,
  GetApiEmpresaParams,
  GetApiEmpresaRedesocialParams,
  GetApiEstoqueParams,
  GetApiFichafinanceiraParams,
  GetApiHistoricovendaParams,
  GetApiListacasamentoParams,
  GetApiListacasamentoSaldoParams,
  GetApiParametroParametroParams,
  GetApiParametroParams,
  GetApiParametroPermissaoParams,
  GetApiPedidoecommerceCarrinhoParams,
  GetApiPedidoecommerceListarParams,
  GetApiPedidoecommerceParams,
  GetApiPedidomobileListarParams,
  GetApiPedidomobileParams,
  GetApiPedidomobilePdfPedidoIdParams,
  GetApiPrecoParams,
  GetApiPrecoTabelaprecoParams,
  GetApiProdutoCompostoParams,
  GetApiProdutoConversaoParams,
  GetApiProdutoEcommerceNovosParams,
  GetApiProdutoEcommercePaginadoParams,
  GetApiProdutoEcommerceParams,
  GetApiProdutoParams,
  GetApiPromocaoEcommerceParams,
  GetApiPromocaoParams,
  GetApiSugestaoVendaDoprodutoParams,
  GetApiSugestaoVendaParams,
  GetApiSugestaoVendaProdutoParams,
  GetApiSugestaoVendaSubgrupoParams,
  GetApiUsuarioEmpresasParams,
  GetApiUsuarioParams,
  GetApiVendedorMetaParams,
  HistoricoVendaDto,
  ListaCasamentoDto,
  ListaCasamentoLeituraDto,
  ListaCasamentoSaldoDto,
  ListaCasamentoSaldoLeituraDto,
  ListaCasamentoValidaDto,
  ParametroDto,
  ParametroDtoArrayBody,
  PedidoDto,
  PedidoEcommerceDto,
  PedidoEcommerceLeituraDto,
  PedidoLeituraDto,
  PermissaoDto,
  ProdutoCategoriaDto,
  ProdutoCompostoDto,
  ProdutoConversaoDto,
  ProdutoDto,
  ProdutoEmPromocaoDto,
  ProdutoFotoDto,
  ProdutoGrupoDto,
  ProdutoMarcaDto,
  ProdutoPrecoDto,
  ProdutoSubGrupoDto,
  ProdutoTabPrecoDto,
  ProdutosEcommerceDto,
  ProdutosEmPromocaoEcommerceDto,
  PromocaoCondPgtoDto,
  PromocaoDto,
  PromocaoEmpresaDto,
  PromocaoProdutoDto,
  PutApiEmpresaUltimasincronizacaoParams,
  PutApiPedidoecommerceBaixadonaoParams,
  PutApiPedidoecommerceBaixadosimParams,
  PutApiPedidomobileAtivarParams,
  PutApiPedidomobileBaixadonaoParams,
  PutApiPedidomobileBaixadosimParams,
  PutApiPedidomobileInativarParams,
  PutApiPedidomobileLiberarnaoParams,
  PutApiUsuarioAtivarParams,
  PutApiUsuarioDesativarParams,
  RedeSocialDto,
  RegiaoAtendidaDto,
  RegiaoEntregaLojaDto,
  RelatorioDto,
  ResponseError,
  RetornoDto,
  RetornoPedido,
  SugestaoVendaDto,
  SugestaoVendaProdutoDto,
  SugestaoVendaProdutoLeituraDto,
  SugestaoVendaSubGrupoDto,
  TokenAutenticacaoDto,
  TokenContratoAgrupadooDto,
  TransportadoraCadDto,
  TransportadoraDto,
  UsuarioDto,
  UsuarioEcommerceDto,
  UsuarioEcommerceEnderecoDto,
  UsuarioEcommerceEnderecoIncluirDto,
  UsuarioEcommerceSenhaDto,
  UsuarioEmpresasDto,
  UsuarioSuporteDto,
  VendedorMetaDto
} from './mCNSistemas.schemas';

import { customInstance } from '../mutator/custom-instance';


  
  
  
/**
 * @summary Incluir auditoria
 */
export const postApiAuditoria = (
    auditoriaDto: AuditoriaDto,
 ) => {
    return customInstance<void>(
    {url: `/api/auditoria`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: auditoriaDto
    },
    );
  }



export const getPostApiAuditoriaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: AuditoriaDto }): Promise<void> => {
    return postApiAuditoria(arg);
  }
}
export const getPostApiAuditoriaMutationKey = () => [`/api/auditoria`] as const;

export type PostApiAuditoriaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuditoria>>>
export type PostApiAuditoriaMutationError = ResponseError

/**
 * @summary Incluir auditoria
 */
export const usePostApiAuditoria = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiAuditoria>>, TError, Key, AuditoriaDto, Awaited<ReturnType<typeof postApiAuditoria>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiAuditoriaMutationKey();
  const swrFn = getPostApiAuditoriaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar auditorias
 */
export const getApiAuditoria = (
    params: GetApiAuditoriaParams,
 ) => {
    return customInstance<AuditoriaDto[]>(
    {url: `/api/auditoria`, method: 'GET',
        params
    },
    );
  }



export const getGetApiAuditoriaKey = (params: GetApiAuditoriaParams,) => [`/api/auditoria`, ...(params ? [params]: [])] as const;

export type GetApiAuditoriaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuditoria>>>
export type GetApiAuditoriaQueryError = ResponseError

/**
 * @summary Listar auditorias
 */
export const useGetApiAuditoria = <TError = ResponseError>(
  params: GetApiAuditoriaParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiAuditoria>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiAuditoriaKey(params) : null);
  const swrFn = () => getApiAuditoria(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Autentica√ß√£o padr√£o
 */
export const postApiAutenticacaoAutenticar = (
    autenticacaoDto: AutenticacaoDto,
 ) => {
    return customInstance<TokenAutenticacaoDto>(
    {url: `/api/autenticacao/autenticar`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: autenticacaoDto
    },
    );
  }



export const getPostApiAutenticacaoAutenticarMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: AutenticacaoDto }): Promise<TokenAutenticacaoDto> => {
    return postApiAutenticacaoAutenticar(arg);
  }
}
export const getPostApiAutenticacaoAutenticarMutationKey = () => [`/api/autenticacao/autenticar`] as const;

export type PostApiAutenticacaoAutenticarMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAutenticacaoAutenticar>>>
export type PostApiAutenticacaoAutenticarMutationError = ResponseError

/**
 * @summary Autentica√ß√£o padr√£o
 */
export const usePostApiAutenticacaoAutenticar = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiAutenticacaoAutenticar>>, TError, Key, AutenticacaoDto, Awaited<ReturnType<typeof postApiAutenticacaoAutenticar>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiAutenticacaoAutenticarMutationKey();
  const swrFn = getPostApiAutenticacaoAutenticarMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Teste API Ativa
 */
export const getApiAutenticacaoPing = (
    
 ) => {
    return customInstance<void>(
    {url: `/api/autenticacao/ping`, method: 'GET'
    },
    );
  }



export const getGetApiAutenticacaoPingKey = () => [`/api/autenticacao/ping`] as const;

export type GetApiAutenticacaoPingQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAutenticacaoPing>>>
export type GetApiAutenticacaoPingQueryError = ResponseError

/**
 * @summary Teste API Ativa
 */
export const useGetApiAutenticacaoPing = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiAutenticacaoPing>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiAutenticacaoPingKey() : null);
  const swrFn = () => getApiAutenticacaoPing()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Autentica√ß√£o por contrato agrupado
 */
export const postApiAutenticacaoAutenticarContratoagrupado = (
    autenticacaoDto: AutenticacaoDto[],
 ) => {
    return customInstance<TokenContratoAgrupadooDto>(
    {url: `/api/autenticacao/autenticar/contratoagrupado`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: autenticacaoDto
    },
    );
  }



export const getPostApiAutenticacaoAutenticarContratoagrupadoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: AutenticacaoDto[] }): Promise<TokenContratoAgrupadooDto> => {
    return postApiAutenticacaoAutenticarContratoagrupado(arg);
  }
}
export const getPostApiAutenticacaoAutenticarContratoagrupadoMutationKey = () => [`/api/autenticacao/autenticar/contratoagrupado`] as const;

export type PostApiAutenticacaoAutenticarContratoagrupadoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAutenticacaoAutenticarContratoagrupado>>>
export type PostApiAutenticacaoAutenticarContratoagrupadoMutationError = ResponseError

/**
 * @summary Autentica√ß√£o por contrato agrupado
 */
export const usePostApiAutenticacaoAutenticarContratoagrupado = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiAutenticacaoAutenticarContratoagrupado>>, TError, Key, AutenticacaoDto[], Awaited<ReturnType<typeof postApiAutenticacaoAutenticarContratoagrupado>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiAutenticacaoAutenticarContratoagrupadoMutationKey();
  const swrFn = getPostApiAutenticacaoAutenticarContratoagrupadoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar clientes por vendedor
 */
export const getApiClienteVendedor = (
    params: GetApiClienteVendedorParams,
 ) => {
    return customInstance<ClienteDto[]>(
    {url: `/api/cliente/vendedor`, method: 'GET',
        params
    },
    );
  }



export const getGetApiClienteVendedorKey = (params: GetApiClienteVendedorParams,) => [`/api/cliente/vendedor`, ...(params ? [params]: [])] as const;

export type GetApiClienteVendedorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiClienteVendedor>>>
export type GetApiClienteVendedorQueryError = ResponseError

/**
 * @summary Listar clientes por vendedor
 */
export const useGetApiClienteVendedor = <TError = ResponseError>(
  params: GetApiClienteVendedorParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiClienteVendedor>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiClienteVendedorKey(params) : null);
  const swrFn = () => getApiClienteVendedor(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir vendedor do cliente
 */
export const postApiClienteVendedor = (
    clienteVendedorDto: ClienteVendedorDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/cliente/vendedor`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clienteVendedorDto
    },
    );
  }



export const getPostApiClienteVendedorMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ClienteVendedorDto[] }): Promise<void> => {
    return postApiClienteVendedor(arg);
  }
}
export const getPostApiClienteVendedorMutationKey = () => [`/api/cliente/vendedor`] as const;

export type PostApiClienteVendedorMutationResult = NonNullable<Awaited<ReturnType<typeof postApiClienteVendedor>>>
export type PostApiClienteVendedorMutationError = ResponseError

/**
 * @summary Incluir vendedor do cliente
 */
export const usePostApiClienteVendedor = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiClienteVendedor>>, TError, Key, ClienteVendedorDto[], Awaited<ReturnType<typeof postApiClienteVendedor>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiClienteVendedorMutationKey();
  const swrFn = getPostApiClienteVendedorMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir ou alterar cliente(s)
 */
export const postApiCliente = (
    clienteDto: ClienteDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/cliente`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clienteDto
    },
    );
  }



export const getPostApiClienteMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ClienteDto[] }): Promise<void> => {
    return postApiCliente(arg);
  }
}
export const getPostApiClienteMutationKey = () => [`/api/cliente`] as const;

export type PostApiClienteMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCliente>>>
export type PostApiClienteMutationError = ResponseError

/**
 * @summary Incluir ou alterar cliente(s)
 */
export const usePostApiCliente = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiCliente>>, TError, Key, ClienteDto[], Awaited<ReturnType<typeof postApiCliente>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiClienteMutationKey();
  const swrFn = getPostApiClienteMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar clientes
 */
export const getApiCliente = (
    params: GetApiClienteParams,
 ) => {
    return customInstance<ClienteDto[]>(
    {url: `/api/cliente`, method: 'GET',
        params
    },
    );
  }



export const getGetApiClienteKey = (params: GetApiClienteParams,) => [`/api/cliente`, ...(params ? [params]: [])] as const;

export type GetApiClienteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCliente>>>
export type GetApiClienteQueryError = ResponseError

/**
 * @summary Listar clientes
 */
export const useGetApiCliente = <TError = ResponseError>(
  params: GetApiClienteParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiCliente>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiClienteKey(params) : null);
  const swrFn = () => getApiCliente(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir cliente 
 */
export const deleteApiCliente = (
    params: DeleteApiClienteParams,
 ) => {
    return customInstance<void>(
    {url: `/api/cliente`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiClienteMutationFetcher = (params: DeleteApiClienteParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiCliente(params);
  }
}
export const getDeleteApiClienteMutationKey = (params: DeleteApiClienteParams,) => [`/api/cliente`, ...(params ? [params]: [])] as const;

export type DeleteApiClienteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCliente>>>
export type DeleteApiClienteMutationError = ResponseError

/**
 * @summary Excluir cliente 
 */
export const useDeleteApiCliente = <TError = ResponseError>(
  params: DeleteApiClienteParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiCliente>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiCliente>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiClienteMutationKey(params);
  const swrFn = getDeleteApiClienteMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir ficha financeira
 */
export const postApiFichafinanceira = (
    fichaFinanceiraDto: FichaFinanceiraDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/fichafinanceira`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: fichaFinanceiraDto
    },
    );
  }



export const getPostApiFichafinanceiraMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: FichaFinanceiraDto[] }): Promise<void> => {
    return postApiFichafinanceira(arg);
  }
}
export const getPostApiFichafinanceiraMutationKey = () => [`/api/fichafinanceira`] as const;

export type PostApiFichafinanceiraMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFichafinanceira>>>
export type PostApiFichafinanceiraMutationError = ResponseError

/**
 * @summary Incluir ficha financeira
 */
export const usePostApiFichafinanceira = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiFichafinanceira>>, TError, Key, FichaFinanceiraDto[], Awaited<ReturnType<typeof postApiFichafinanceira>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiFichafinanceiraMutationKey();
  const swrFn = getPostApiFichafinanceiraMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar ficha financeira 
 */
export const getApiFichafinanceira = (
    params: GetApiFichafinanceiraParams,
 ) => {
    return customInstance<FichaFinanceiraDto[]>(
    {url: `/api/fichafinanceira`, method: 'GET',
        params
    },
    );
  }



export const getGetApiFichafinanceiraKey = (params: GetApiFichafinanceiraParams,) => [`/api/fichafinanceira`, ...(params ? [params]: [])] as const;

export type GetApiFichafinanceiraQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFichafinanceira>>>
export type GetApiFichafinanceiraQueryError = ResponseError

/**
 * @summary Listar ficha financeira 
 */
export const useGetApiFichafinanceira = <TError = ResponseError>(
  params: GetApiFichafinanceiraParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiFichafinanceira>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiFichafinanceiraKey(params) : null);
  const swrFn = () => getApiFichafinanceira(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir ficha financeira 
 */
export const deleteApiFichafinanceira = (
    params: DeleteApiFichafinanceiraParams,
 ) => {
    return customInstance<void>(
    {url: `/api/fichafinanceira`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiFichafinanceiraMutationFetcher = (params: DeleteApiFichafinanceiraParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiFichafinanceira(params);
  }
}
export const getDeleteApiFichafinanceiraMutationKey = (params: DeleteApiFichafinanceiraParams,) => [`/api/fichafinanceira`, ...(params ? [params]: [])] as const;

export type DeleteApiFichafinanceiraMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiFichafinanceira>>>
export type DeleteApiFichafinanceiraMutationError = ResponseError

/**
 * @summary Excluir ficha financeira 
 */
export const useDeleteApiFichafinanceira = <TError = ResponseError>(
  params: DeleteApiFichafinanceiraParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiFichafinanceira>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiFichafinanceira>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiFichafinanceiraMutationKey(params);
  const swrFn = getDeleteApiFichafinanceiraMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir hist√≥rico de venda
 */
export const postApiHistoricovenda = (
    historicoVendaDto: HistoricoVendaDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/historicovenda`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: historicoVendaDto
    },
    );
  }



export const getPostApiHistoricovendaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: HistoricoVendaDto[] }): Promise<void> => {
    return postApiHistoricovenda(arg);
  }
}
export const getPostApiHistoricovendaMutationKey = () => [`/api/historicovenda`] as const;

export type PostApiHistoricovendaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiHistoricovenda>>>
export type PostApiHistoricovendaMutationError = ResponseError

/**
 * @summary Incluir hist√≥rico de venda
 */
export const usePostApiHistoricovenda = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiHistoricovenda>>, TError, Key, HistoricoVendaDto[], Awaited<ReturnType<typeof postApiHistoricovenda>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiHistoricovendaMutationKey();
  const swrFn = getPostApiHistoricovendaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar hist√≥rico de venda
 */
export const getApiHistoricovenda = (
    params: GetApiHistoricovendaParams,
 ) => {
    return customInstance<HistoricoVendaDto>(
    {url: `/api/historicovenda`, method: 'GET',
        params
    },
    );
  }



export const getGetApiHistoricovendaKey = (params: GetApiHistoricovendaParams,) => [`/api/historicovenda`, ...(params ? [params]: [])] as const;

export type GetApiHistoricovendaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHistoricovenda>>>
export type GetApiHistoricovendaQueryError = ResponseError

/**
 * @summary Listar hist√≥rico de venda
 */
export const useGetApiHistoricovenda = <TError = ResponseError>(
  params: GetApiHistoricovendaParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiHistoricovenda>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiHistoricovendaKey(params) : null);
  const swrFn = () => getApiHistoricovenda(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir hist√≥rico de venda 
 */
export const deleteApiHistoricovenda = (
    params: DeleteApiHistoricovendaParams,
 ) => {
    return customInstance<void>(
    {url: `/api/historicovenda`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiHistoricovendaMutationFetcher = (params: DeleteApiHistoricovendaParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiHistoricovenda(params);
  }
}
export const getDeleteApiHistoricovendaMutationKey = (params: DeleteApiHistoricovendaParams,) => [`/api/historicovenda`, ...(params ? [params]: [])] as const;

export type DeleteApiHistoricovendaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiHistoricovenda>>>
export type DeleteApiHistoricovendaMutationError = ResponseError

/**
 * @summary Excluir hist√≥rico de venda 
 */
export const useDeleteApiHistoricovenda = <TError = ResponseError>(
  params: DeleteApiHistoricovendaParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiHistoricovenda>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiHistoricovenda>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiHistoricovendaMutationKey(params);
  const swrFn = getDeleteApiHistoricovendaMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir condi√ß√£o de pagamento
 */
export const postApiCondpgto = (
    condicaoPagamentoDto: CondicaoPagamentoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/condpgto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: condicaoPagamentoDto
    },
    );
  }



export const getPostApiCondpgtoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: CondicaoPagamentoDto[] }): Promise<void> => {
    return postApiCondpgto(arg);
  }
}
export const getPostApiCondpgtoMutationKey = () => [`/api/condpgto`] as const;

export type PostApiCondpgtoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCondpgto>>>
export type PostApiCondpgtoMutationError = ResponseError

/**
 * @summary Incluir condi√ß√£o de pagamento
 */
export const usePostApiCondpgto = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiCondpgto>>, TError, Key, CondicaoPagamentoDto[], Awaited<ReturnType<typeof postApiCondpgto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiCondpgtoMutationKey();
  const swrFn = getPostApiCondpgtoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar condi√ß√£o de pagamento
 */
export const getApiCondpgto = (
    params: GetApiCondpgtoParams,
 ) => {
    return customInstance<CondicaoPagamentoDto[]>(
    {url: `/api/condpgto`, method: 'GET',
        params
    },
    );
  }



export const getGetApiCondpgtoKey = (params: GetApiCondpgtoParams,) => [`/api/condpgto`, ...(params ? [params]: [])] as const;

export type GetApiCondpgtoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCondpgto>>>
export type GetApiCondpgtoQueryError = ResponseError

/**
 * @summary Listar condi√ß√£o de pagamento
 */
export const useGetApiCondpgto = <TError = ResponseError>(
  params: GetApiCondpgtoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiCondpgto>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiCondpgtoKey(params) : null);
  const swrFn = () => getApiCondpgto(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir condi√ß√£o de pagamento
 */
export const deleteApiCondpgto = (
    params: DeleteApiCondpgtoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/condpgto`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiCondpgtoMutationFetcher = (params: DeleteApiCondpgtoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiCondpgto(params);
  }
}
export const getDeleteApiCondpgtoMutationKey = (params: DeleteApiCondpgtoParams,) => [`/api/condpgto`, ...(params ? [params]: [])] as const;

export type DeleteApiCondpgtoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCondpgto>>>
export type DeleteApiCondpgtoMutationError = ResponseError

/**
 * @summary Excluir condi√ß√£o de pagamento
 */
export const useDeleteApiCondpgto = <TError = ResponseError>(
  params: DeleteApiCondpgtoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiCondpgto>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiCondpgto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiCondpgtoMutationKey(params);
  const swrFn = getDeleteApiCondpgtoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir condi√ß√£o de pagamento do cliente
 */
export const postApiCondpgtoCondpgtocliente = (
    condicaoPagamentoClienteDto: CondicaoPagamentoClienteDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/condpgto/condpgtocliente`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: condicaoPagamentoClienteDto
    },
    );
  }



export const getPostApiCondpgtoCondpgtoclienteMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: CondicaoPagamentoClienteDto[] }): Promise<void> => {
    return postApiCondpgtoCondpgtocliente(arg);
  }
}
export const getPostApiCondpgtoCondpgtoclienteMutationKey = () => [`/api/condpgto/condpgtocliente`] as const;

export type PostApiCondpgtoCondpgtoclienteMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCondpgtoCondpgtocliente>>>
export type PostApiCondpgtoCondpgtoclienteMutationError = ResponseError

/**
 * @summary Incluir condi√ß√£o de pagamento do cliente
 */
export const usePostApiCondpgtoCondpgtocliente = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiCondpgtoCondpgtocliente>>, TError, Key, CondicaoPagamentoClienteDto[], Awaited<ReturnType<typeof postApiCondpgtoCondpgtocliente>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiCondpgtoCondpgtoclienteMutationKey();
  const swrFn = getPostApiCondpgtoCondpgtoclienteMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar condi√ß√£o de pagamento do cliente
 */
export const getApiCondpgtoCondpgtocliente = (
    params: GetApiCondpgtoCondpgtoclienteParams,
 ) => {
    return customInstance<CondicaoPagamentoClienteDto[]>(
    {url: `/api/condpgto/condpgtocliente`, method: 'GET',
        params
    },
    );
  }



export const getGetApiCondpgtoCondpgtoclienteKey = (params: GetApiCondpgtoCondpgtoclienteParams,) => [`/api/condpgto/condpgtocliente`, ...(params ? [params]: [])] as const;

export type GetApiCondpgtoCondpgtoclienteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCondpgtoCondpgtocliente>>>
export type GetApiCondpgtoCondpgtoclienteQueryError = ResponseError

/**
 * @summary Listar condi√ß√£o de pagamento do cliente
 */
export const useGetApiCondpgtoCondpgtocliente = <TError = ResponseError>(
  params: GetApiCondpgtoCondpgtoclienteParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiCondpgtoCondpgtocliente>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiCondpgtoCondpgtoclienteKey(params) : null);
  const swrFn = () => getApiCondpgtoCondpgtocliente(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir condi√ß√£o de pagamento do cliente
 */
export const deleteApiCondpgtoCondpgtocliente = (
    params: DeleteApiCondpgtoCondpgtoclienteParams,
 ) => {
    return customInstance<void>(
    {url: `/api/condpgto/condpgtocliente`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiCondpgtoCondpgtoclienteMutationFetcher = (params: DeleteApiCondpgtoCondpgtoclienteParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiCondpgtoCondpgtocliente(params);
  }
}
export const getDeleteApiCondpgtoCondpgtoclienteMutationKey = (params: DeleteApiCondpgtoCondpgtoclienteParams,) => [`/api/condpgto/condpgtocliente`, ...(params ? [params]: [])] as const;

export type DeleteApiCondpgtoCondpgtoclienteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCondpgtoCondpgtocliente>>>
export type DeleteApiCondpgtoCondpgtoclienteMutationError = ResponseError

/**
 * @summary Excluir condi√ß√£o de pagamento do cliente
 */
export const useDeleteApiCondpgtoCondpgtocliente = <TError = ResponseError>(
  params: DeleteApiCondpgtoCondpgtoclienteParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiCondpgtoCondpgtocliente>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiCondpgtoCondpgtocliente>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiCondpgtoCondpgtoclienteMutationKey(params);
  const swrFn = getDeleteApiCondpgtoCondpgtoclienteMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar forma de pagamento
 */
export const getApiCondpgtoFormapgto = (
    
 ) => {
    return customInstance<FormaPgtoEcommerceDto[]>(
    {url: `/api/condpgto/formapgto`, method: 'GET'
    },
    );
  }



export const getGetApiCondpgtoFormapgtoKey = () => [`/api/condpgto/formapgto`] as const;

export type GetApiCondpgtoFormapgtoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCondpgtoFormapgto>>>
export type GetApiCondpgtoFormapgtoQueryError = ResponseError

/**
 * @summary Listar forma de pagamento
 */
export const useGetApiCondpgtoFormapgto = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiCondpgtoFormapgto>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiCondpgtoFormapgtoKey() : null);
  const swrFn = () => getApiCondpgtoFormapgto()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar marca
 */
export const getApiEcommerceProdutoMarca = (
    
 ) => {
    return customInstance<DescricaoDto[]>(
    {url: `/api/ecommerce/produto/marca`, method: 'GET'
    },
    );
  }



export const getGetApiEcommerceProdutoMarcaKey = () => [`/api/ecommerce/produto/marca`] as const;

export type GetApiEcommerceProdutoMarcaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceProdutoMarca>>>
export type GetApiEcommerceProdutoMarcaQueryError = ResponseError

/**
 * @summary Listar marca
 */
export const useGetApiEcommerceProdutoMarca = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceProdutoMarca>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceProdutoMarcaKey() : null);
  const swrFn = () => getApiEcommerceProdutoMarca()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar subgrupo
 */
export const getApiEcommerceProdutoSubgrupo = (
    
 ) => {
    return customInstance<DescricaoDto[]>(
    {url: `/api/ecommerce/produto/subgrupo`, method: 'GET'
    },
    );
  }



export const getGetApiEcommerceProdutoSubgrupoKey = () => [`/api/ecommerce/produto/subgrupo`] as const;

export type GetApiEcommerceProdutoSubgrupoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceProdutoSubgrupo>>>
export type GetApiEcommerceProdutoSubgrupoQueryError = ResponseError

/**
 * @summary Listar subgrupo
 */
export const useGetApiEcommerceProdutoSubgrupo = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceProdutoSubgrupo>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceProdutoSubgrupoKey() : null);
  const swrFn = () => getApiEcommerceProdutoSubgrupo()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir CEP de regiao que a loja faz entrega
 */
export const postApiEcommerceRegiaoentregaloja = (
    regiaoEntregaLojaDto: RegiaoEntregaLojaDto,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/regiaoentregaloja`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: regiaoEntregaLojaDto
    },
    );
  }



export const getPostApiEcommerceRegiaoentregalojaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: RegiaoEntregaLojaDto }): Promise<void> => {
    return postApiEcommerceRegiaoentregaloja(arg);
  }
}
export const getPostApiEcommerceRegiaoentregalojaMutationKey = () => [`/api/ecommerce/regiaoentregaloja`] as const;

export type PostApiEcommerceRegiaoentregalojaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEcommerceRegiaoentregaloja>>>
export type PostApiEcommerceRegiaoentregalojaMutationError = ResponseError

/**
 * @summary Incluir CEP de regiao que a loja faz entrega
 */
export const usePostApiEcommerceRegiaoentregaloja = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEcommerceRegiaoentregaloja>>, TError, Key, RegiaoEntregaLojaDto, Awaited<ReturnType<typeof postApiEcommerceRegiaoentregaloja>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEcommerceRegiaoentregalojaMutationKey();
  const swrFn = getPostApiEcommerceRegiaoentregalojaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar grupo 
 */
export const getApiEcommerceProdutoGrupo = (
    
 ) => {
    return customInstance<DescricaoDto[]>(
    {url: `/api/ecommerce/produto/grupo`, method: 'GET'
    },
    );
  }



export const getGetApiEcommerceProdutoGrupoKey = () => [`/api/ecommerce/produto/grupo`] as const;

export type GetApiEcommerceProdutoGrupoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceProdutoGrupo>>>
export type GetApiEcommerceProdutoGrupoQueryError = ResponseError

/**
 * @summary Listar grupo 
 */
export const useGetApiEcommerceProdutoGrupo = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceProdutoGrupo>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceProdutoGrupoKey() : null);
  const swrFn = () => getApiEcommerceProdutoGrupo()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Verifica se o usuario √© administrador do e-commerce
 */
export const getApiEcommerceAdministrador = (
    params: GetApiEcommerceAdministradorParams,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/administrador`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEcommerceAdministradorKey = (params: GetApiEcommerceAdministradorParams,) => [`/api/ecommerce/administrador`, ...(params ? [params]: [])] as const;

export type GetApiEcommerceAdministradorQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceAdministrador>>>
export type GetApiEcommerceAdministradorQueryError = ResponseError

/**
 * @summary Verifica se o usuario √© administrador do e-commerce
 */
export const useGetApiEcommerceAdministrador = <TError = ResponseError>(
  params: GetApiEcommerceAdministradorParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceAdministrador>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceAdministradorKey(params) : null);
  const swrFn = () => getApiEcommerceAdministrador(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Consultar valor do frete
 */
export const getApiEcommerceFrete = (
    params: GetApiEcommerceFreteParams,
 ) => {
    return customInstance<FreteDto[]>(
    {url: `/api/ecommerce/frete`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEcommerceFreteKey = (params: GetApiEcommerceFreteParams,) => [`/api/ecommerce/frete`, ...(params ? [params]: [])] as const;

export type GetApiEcommerceFreteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceFrete>>>
export type GetApiEcommerceFreteQueryError = ResponseError

/**
 * @summary Consultar valor do frete
 */
export const useGetApiEcommerceFrete = <TError = ResponseError>(
  params: GetApiEcommerceFreteParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceFrete>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceFreteKey(params) : null);
  const swrFn = () => getApiEcommerceFrete(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir CEP de regiao atendida
 */
export const postApiEcommerceRegiaoatendida = (
    regiaoAtendidaDto: RegiaoAtendidaDto,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/regiaoatendida`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: regiaoAtendidaDto
    },
    );
  }



export const getPostApiEcommerceRegiaoatendidaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: RegiaoAtendidaDto }): Promise<void> => {
    return postApiEcommerceRegiaoatendida(arg);
  }
}
export const getPostApiEcommerceRegiaoatendidaMutationKey = () => [`/api/ecommerce/regiaoatendida`] as const;

export type PostApiEcommerceRegiaoatendidaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEcommerceRegiaoatendida>>>
export type PostApiEcommerceRegiaoatendidaMutationError = ResponseError

/**
 * @summary Incluir CEP de regiao atendida
 */
export const usePostApiEcommerceRegiaoatendida = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEcommerceRegiaoatendida>>, TError, Key, RegiaoAtendidaDto, Awaited<ReturnType<typeof postApiEcommerceRegiaoatendida>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEcommerceRegiaoatendidaMutationKey();
  const swrFn = getPostApiEcommerceRegiaoatendidaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar CEP de regi√£o atendida
 */
export const getApiEcommerceRegiaoatendida = (
    params: GetApiEcommerceRegiaoatendidaParams,
 ) => {
    return customInstance<RegiaoAtendidaDto[]>(
    {url: `/api/ecommerce/regiaoatendida`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEcommerceRegiaoatendidaKey = (params: GetApiEcommerceRegiaoatendidaParams,) => [`/api/ecommerce/regiaoatendida`, ...(params ? [params]: [])] as const;

export type GetApiEcommerceRegiaoatendidaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceRegiaoatendida>>>
export type GetApiEcommerceRegiaoatendidaQueryError = ResponseError

/**
 * @summary Listar CEP de regi√£o atendida
 */
export const useGetApiEcommerceRegiaoatendida = <TError = ResponseError>(
  params: GetApiEcommerceRegiaoatendidaParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceRegiaoatendida>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceRegiaoatendidaKey(params) : null);
  const swrFn = () => getApiEcommerceRegiaoatendida(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Verifica se e-mail possu√≠ cadastro
 */
export const getApiEcommerceUsuarioExiste = (
    params: GetApiEcommerceUsuarioExisteParams,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/usuario/existe`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEcommerceUsuarioExisteKey = (params: GetApiEcommerceUsuarioExisteParams,) => [`/api/ecommerce/usuario/existe`, ...(params ? [params]: [])] as const;

export type GetApiEcommerceUsuarioExisteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceUsuarioExiste>>>
export type GetApiEcommerceUsuarioExisteQueryError = ResponseError

/**
 * @summary Verifica se e-mail possu√≠ cadastro
 */
export const useGetApiEcommerceUsuarioExiste = <TError = ResponseError>(
  params: GetApiEcommerceUsuarioExisteParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceUsuarioExiste>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceUsuarioExisteKey(params) : null);
  const swrFn = () => getApiEcommerceUsuarioExiste(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir parametro para o e-commerce
 */
export const postApiEcommerceParametro = (
    parametroDtoArrayBody: ParametroDtoArrayBody,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/parametro`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: parametroDtoArrayBody
    },
    );
  }



export const getPostApiEcommerceParametroMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ParametroDtoArrayBody }): Promise<void> => {
    return postApiEcommerceParametro(arg);
  }
}
export const getPostApiEcommerceParametroMutationKey = () => [`/api/ecommerce/parametro`] as const;

export type PostApiEcommerceParametroMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEcommerceParametro>>>
export type PostApiEcommerceParametroMutationError = ResponseError

/**
 * @summary Incluir parametro para o e-commerce
 */
export const usePostApiEcommerceParametro = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEcommerceParametro>>, TError, Key, ParametroDtoArrayBody, Awaited<ReturnType<typeof postApiEcommerceParametro>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEcommerceParametroMutationKey();
  const swrFn = getPostApiEcommerceParametroMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Ler parametro e-commerce
 */
export const getApiEcommerceParametro = (
    params: GetApiEcommerceParametroParams,
 ) => {
    return customInstance<RetornoDto>(
    {url: `/api/ecommerce/parametro`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEcommerceParametroKey = (params: GetApiEcommerceParametroParams,) => [`/api/ecommerce/parametro`, ...(params ? [params]: [])] as const;

export type GetApiEcommerceParametroQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceParametro>>>
export type GetApiEcommerceParametroQueryError = ResponseError

/**
 * @summary Ler parametro e-commerce
 */
export const useGetApiEcommerceParametro = <TError = ResponseError>(
  params: GetApiEcommerceParametroParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceParametro>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceParametroKey(params) : null);
  const swrFn = () => getApiEcommerceParametro(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir filiais para o site do e-commerce
 */
export const postApiEcommerceFilial = (
    filialEcommerceDto: FilialEcommerceDto,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/filial`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filialEcommerceDto
    },
    );
  }



export const getPostApiEcommerceFilialMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: FilialEcommerceDto }): Promise<void> => {
    return postApiEcommerceFilial(arg);
  }
}
export const getPostApiEcommerceFilialMutationKey = () => [`/api/ecommerce/filial`] as const;

export type PostApiEcommerceFilialMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEcommerceFilial>>>
export type PostApiEcommerceFilialMutationError = ResponseError

/**
 * @summary Incluir filiais para o site do e-commerce
 */
export const usePostApiEcommerceFilial = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEcommerceFilial>>, TError, Key, FilialEcommerceDto, Awaited<ReturnType<typeof postApiEcommerceFilial>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEcommerceFilialMutationKey();
  const swrFn = getPostApiEcommerceFilialMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar filiais para o site do e-commerce
 */
export const getApiEcommerceFilial = (
    
 ) => {
    return customInstance<FilialEcommerceDto[]>(
    {url: `/api/ecommerce/filial`, method: 'GET'
    },
    );
  }



export const getGetApiEcommerceFilialKey = () => [`/api/ecommerce/filial`] as const;

export type GetApiEcommerceFilialQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceFilial>>>
export type GetApiEcommerceFilialQueryError = ResponseError

/**
 * @summary Listar filiais para o site do e-commerce
 */
export const useGetApiEcommerceFilial = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceFilial>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceFilialKey() : null);
  const swrFn = () => getApiEcommerceFilial()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir endere√ßo
 */
export const postApiEcommerceUsuarioEndereco = (
    usuarioEcommerceEnderecoIncluirDto: UsuarioEcommerceEnderecoIncluirDto,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/usuario/endereco`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: usuarioEcommerceEnderecoIncluirDto
    },
    );
  }



export const getPostApiEcommerceUsuarioEnderecoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: UsuarioEcommerceEnderecoIncluirDto }): Promise<void> => {
    return postApiEcommerceUsuarioEndereco(arg);
  }
}
export const getPostApiEcommerceUsuarioEnderecoMutationKey = () => [`/api/ecommerce/usuario/endereco`] as const;

export type PostApiEcommerceUsuarioEnderecoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEcommerceUsuarioEndereco>>>
export type PostApiEcommerceUsuarioEnderecoMutationError = ResponseError

/**
 * @summary Incluir endere√ßo
 */
export const usePostApiEcommerceUsuarioEndereco = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEcommerceUsuarioEndereco>>, TError, Key, UsuarioEcommerceEnderecoIncluirDto, Awaited<ReturnType<typeof postApiEcommerceUsuarioEndereco>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEcommerceUsuarioEnderecoMutationKey();
  const swrFn = getPostApiEcommerceUsuarioEnderecoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar endere√ßo
 */
export const getApiEcommerceUsuarioEndereco = (
    
 ) => {
    return customInstance<UsuarioEcommerceEnderecoDto>(
    {url: `/api/ecommerce/usuario/endereco`, method: 'GET'
    },
    );
  }



export const getGetApiEcommerceUsuarioEnderecoKey = () => [`/api/ecommerce/usuario/endereco`] as const;

export type GetApiEcommerceUsuarioEnderecoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceUsuarioEndereco>>>
export type GetApiEcommerceUsuarioEnderecoQueryError = ResponseError

/**
 * @summary Listar endere√ßo
 */
export const useGetApiEcommerceUsuarioEndereco = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceUsuarioEndereco>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceUsuarioEnderecoKey() : null);
  const swrFn = () => getApiEcommerceUsuarioEndereco()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir endere√ßo
 */
export const deleteApiEcommerceUsuarioEndereco = (
    params: DeleteApiEcommerceUsuarioEnderecoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/usuario/endereco`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiEcommerceUsuarioEnderecoMutationFetcher = (params: DeleteApiEcommerceUsuarioEnderecoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiEcommerceUsuarioEndereco(params);
  }
}
export const getDeleteApiEcommerceUsuarioEnderecoMutationKey = (params: DeleteApiEcommerceUsuarioEnderecoParams,) => [`/api/ecommerce/usuario/endereco`, ...(params ? [params]: [])] as const;

export type DeleteApiEcommerceUsuarioEnderecoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiEcommerceUsuarioEndereco>>>
export type DeleteApiEcommerceUsuarioEnderecoMutationError = ResponseError

/**
 * @summary Excluir endere√ßo
 */
export const useDeleteApiEcommerceUsuarioEndereco = <TError = ResponseError>(
  params: DeleteApiEcommerceUsuarioEnderecoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiEcommerceUsuarioEndereco>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiEcommerceUsuarioEndereco>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiEcommerceUsuarioEnderecoMutationKey(params);
  const swrFn = getDeleteApiEcommerceUsuarioEnderecoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Alterar endere√ßo
 */
export const putApiEcommerceUsuarioEndereco = (
    usuarioEcommerceEnderecoDto: UsuarioEcommerceEnderecoDto,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/usuario/endereco`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: usuarioEcommerceEnderecoDto
    },
    );
  }



export const getPutApiEcommerceUsuarioEnderecoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: UsuarioEcommerceEnderecoDto }): Promise<void> => {
    return putApiEcommerceUsuarioEndereco(arg);
  }
}
export const getPutApiEcommerceUsuarioEnderecoMutationKey = () => [`/api/ecommerce/usuario/endereco`] as const;

export type PutApiEcommerceUsuarioEnderecoMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEcommerceUsuarioEndereco>>>
export type PutApiEcommerceUsuarioEnderecoMutationError = ResponseError

/**
 * @summary Alterar endere√ßo
 */
export const usePutApiEcommerceUsuarioEndereco = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiEcommerceUsuarioEndereco>>, TError, Key, UsuarioEcommerceEnderecoDto, Awaited<ReturnType<typeof putApiEcommerceUsuarioEndereco>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiEcommerceUsuarioEnderecoMutationKey();
  const swrFn = getPutApiEcommerceUsuarioEnderecoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Verifica se regi√£o √© atendida por CEP
 */
export const getApiEcommerceRegiaoatendidacep = (
    params: GetApiEcommerceRegiaoatendidacepParams,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/regiaoatendidacep`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEcommerceRegiaoatendidacepKey = (params: GetApiEcommerceRegiaoatendidacepParams,) => [`/api/ecommerce/regiaoatendidacep`, ...(params ? [params]: [])] as const;

export type GetApiEcommerceRegiaoatendidacepQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceRegiaoatendidacep>>>
export type GetApiEcommerceRegiaoatendidacepQueryError = ResponseError

/**
 * @summary Verifica se regi√£o √© atendida por CEP
 */
export const useGetApiEcommerceRegiaoatendidacep = <TError = ResponseError>(
  params: GetApiEcommerceRegiaoatendidacepParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceRegiaoatendidacep>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceRegiaoatendidacepKey(params) : null);
  const swrFn = () => getApiEcommerceRegiaoatendidacep(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Alterar senha
 */
export const putApiEcommerceUsuarioAlterarsenha = (
    usuarioEcommerceSenhaDto: UsuarioEcommerceSenhaDto,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/usuario/alterarsenha`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: usuarioEcommerceSenhaDto
    },
    );
  }



export const getPutApiEcommerceUsuarioAlterarsenhaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: UsuarioEcommerceSenhaDto }): Promise<void> => {
    return putApiEcommerceUsuarioAlterarsenha(arg);
  }
}
export const getPutApiEcommerceUsuarioAlterarsenhaMutationKey = () => [`/api/ecommerce/usuario/alterarsenha`] as const;

export type PutApiEcommerceUsuarioAlterarsenhaMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEcommerceUsuarioAlterarsenha>>>
export type PutApiEcommerceUsuarioAlterarsenhaMutationError = ResponseError

/**
 * @summary Alterar senha
 */
export const usePutApiEcommerceUsuarioAlterarsenha = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiEcommerceUsuarioAlterarsenha>>, TError, Key, UsuarioEcommerceSenhaDto, Awaited<ReturnType<typeof putApiEcommerceUsuarioAlterarsenha>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiEcommerceUsuarioAlterarsenhaMutationKey();
  const swrFn = getPutApiEcommerceUsuarioAlterarsenhaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir usu√°rio
 */
export const postApiEcommerceUsuario = (
    usuarioEcommerceDto: UsuarioEcommerceDto,
 ) => {
    return customInstance<void>(
    {url: `/api/ecommerce/usuario`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: usuarioEcommerceDto
    },
    );
  }



export const getPostApiEcommerceUsuarioMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: UsuarioEcommerceDto }): Promise<void> => {
    return postApiEcommerceUsuario(arg);
  }
}
export const getPostApiEcommerceUsuarioMutationKey = () => [`/api/ecommerce/usuario`] as const;

export type PostApiEcommerceUsuarioMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEcommerceUsuario>>>
export type PostApiEcommerceUsuarioMutationError = ResponseError

/**
 * @summary Incluir usu√°rio
 */
export const usePostApiEcommerceUsuario = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEcommerceUsuario>>, TError, Key, UsuarioEcommerceDto, Awaited<ReturnType<typeof postApiEcommerceUsuario>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEcommerceUsuarioMutationKey();
  const swrFn = getPostApiEcommerceUsuarioMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Ler usu√°rio
 */
export const getApiEcommerceUsuario = (
    
 ) => {
    return customInstance<UsuarioEcommerceDto>(
    {url: `/api/ecommerce/usuario`, method: 'GET'
    },
    );
  }



export const getGetApiEcommerceUsuarioKey = () => [`/api/ecommerce/usuario`] as const;

export type GetApiEcommerceUsuarioQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceUsuario>>>
export type GetApiEcommerceUsuarioQueryError = ResponseError

/**
 * @summary Ler usu√°rio
 */
export const useGetApiEcommerceUsuario = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceUsuario>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceUsuarioKey() : null);
  const swrFn = () => getApiEcommerceUsuario()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar categoria
 */
export const getApiEcommerceProdutoCategoria = (
    
 ) => {
    return customInstance<DescricaoDto[]>(
    {url: `/api/ecommerce/produto/categoria`, method: 'GET'
    },
    );
  }



export const getGetApiEcommerceProdutoCategoriaKey = () => [`/api/ecommerce/produto/categoria`] as const;

export type GetApiEcommerceProdutoCategoriaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceProdutoCategoria>>>
export type GetApiEcommerceProdutoCategoriaQueryError = ResponseError

/**
 * @summary Listar categoria
 */
export const useGetApiEcommerceProdutoCategoria = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceProdutoCategoria>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceProdutoCategoriaKey() : null);
  const swrFn = () => getApiEcommerceProdutoCategoria()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary recuperar senha do usu√°rio
 */
export const getApiEcommerceUsuarioRecuperar = (
    params: GetApiEcommerceUsuarioRecuperarParams,
 ) => {
    return customInstance<unknown>(
    {url: `/api/ecommerce/usuario/recuperar`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEcommerceUsuarioRecuperarKey = (params: GetApiEcommerceUsuarioRecuperarParams,) => [`/api/ecommerce/usuario/recuperar`, ...(params ? [params]: [])] as const;

export type GetApiEcommerceUsuarioRecuperarQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEcommerceUsuarioRecuperar>>>
export type GetApiEcommerceUsuarioRecuperarQueryError = ResponseError

/**
 * @summary recuperar senha do usu√°rio
 */
export const useGetApiEcommerceUsuarioRecuperar = <TError = ResponseError>(
  params: GetApiEcommerceUsuarioRecuperarParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEcommerceUsuarioRecuperar>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEcommerceUsuarioRecuperarKey(params) : null);
  const swrFn = () => getApiEcommerceUsuarioRecuperar(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar pedidos pendentes por dia
 */
export const getApiDashboardecommercePedidospedentes = (
    params: GetApiDashboardecommercePedidospedentesParams,
 ) => {
    return customInstance<DashboardDiaDto[]>(
    {url: `/api/dashboardecommerce/pedidospedentes`, method: 'GET',
        params
    },
    );
  }



export const getGetApiDashboardecommercePedidospedentesKey = (params: GetApiDashboardecommercePedidospedentesParams,) => [`/api/dashboardecommerce/pedidospedentes`, ...(params ? [params]: [])] as const;

export type GetApiDashboardecommercePedidospedentesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDashboardecommercePedidospedentes>>>
export type GetApiDashboardecommercePedidospedentesQueryError = ResponseError

/**
 * @summary Listar pedidos pendentes por dia
 */
export const useGetApiDashboardecommercePedidospedentes = <TError = ResponseError>(
  params: GetApiDashboardecommercePedidospedentesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiDashboardecommercePedidospedentes>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiDashboardecommercePedidospedentesKey(params) : null);
  const swrFn = () => getApiDashboardecommercePedidospedentes(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar pedidos fechados por dia
 */
export const getApiDashboardecommercePedidosfechados = (
    params: GetApiDashboardecommercePedidosfechadosParams,
 ) => {
    return customInstance<DashboardDiaDto[]>(
    {url: `/api/dashboardecommerce/pedidosfechados`, method: 'GET',
        params
    },
    );
  }



export const getGetApiDashboardecommercePedidosfechadosKey = (params: GetApiDashboardecommercePedidosfechadosParams,) => [`/api/dashboardecommerce/pedidosfechados`, ...(params ? [params]: [])] as const;

export type GetApiDashboardecommercePedidosfechadosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDashboardecommercePedidosfechados>>>
export type GetApiDashboardecommercePedidosfechadosQueryError = ResponseError

/**
 * @summary Listar pedidos fechados por dia
 */
export const useGetApiDashboardecommercePedidosfechados = <TError = ResponseError>(
  params: GetApiDashboardecommercePedidosfechadosParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiDashboardecommercePedidosfechados>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiDashboardecommercePedidosfechadosKey(params) : null);
  const swrFn = () => getApiDashboardecommercePedidosfechados(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar clientes cadastrados por dia
 */
export const getApiDashboardecommerceClientes = (
    params: GetApiDashboardecommerceClientesParams,
 ) => {
    return customInstance<DashboardDiaDto[]>(
    {url: `/api/dashboardecommerce/clientes`, method: 'GET',
        params
    },
    );
  }



export const getGetApiDashboardecommerceClientesKey = (params: GetApiDashboardecommerceClientesParams,) => [`/api/dashboardecommerce/clientes`, ...(params ? [params]: [])] as const;

export type GetApiDashboardecommerceClientesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDashboardecommerceClientes>>>
export type GetApiDashboardecommerceClientesQueryError = ResponseError

/**
 * @summary Listar clientes cadastrados por dia
 */
export const useGetApiDashboardecommerceClientes = <TError = ResponseError>(
  params: GetApiDashboardecommerceClientesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiDashboardecommerceClientes>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiDashboardecommerceClientesKey(params) : null);
  const swrFn = () => getApiDashboardecommerceClientes(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir item no carrinho
 */
export const postApiPedidoecommerceCarrinho = (
    carrinhoDto: CarrinhoDto,
 ) => {
    return customInstance<RetornoPedido>(
    {url: `/api/pedidoecommerce/carrinho`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: carrinhoDto
    },
    );
  }



export const getPostApiPedidoecommerceCarrinhoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: CarrinhoDto }): Promise<RetornoPedido> => {
    return postApiPedidoecommerceCarrinho(arg);
  }
}
export const getPostApiPedidoecommerceCarrinhoMutationKey = () => [`/api/pedidoecommerce/carrinho`] as const;

export type PostApiPedidoecommerceCarrinhoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPedidoecommerceCarrinho>>>
export type PostApiPedidoecommerceCarrinhoMutationError = ResponseError

/**
 * @summary Incluir item no carrinho
 */
export const usePostApiPedidoecommerceCarrinho = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPedidoecommerceCarrinho>>, TError, Key, CarrinhoDto, Awaited<ReturnType<typeof postApiPedidoecommerceCarrinho>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPedidoecommerceCarrinhoMutationKey();
  const swrFn = getPostApiPedidoecommerceCarrinhoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar itens do carrinho de compra
 */
export const getApiPedidoecommerceCarrinho = (
    params: GetApiPedidoecommerceCarrinhoParams,
 ) => {
    return customInstance<CarrinhoDto[]>(
    {url: `/api/pedidoecommerce/carrinho`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPedidoecommerceCarrinhoKey = (params: GetApiPedidoecommerceCarrinhoParams,) => [`/api/pedidoecommerce/carrinho`, ...(params ? [params]: [])] as const;

export type GetApiPedidoecommerceCarrinhoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPedidoecommerceCarrinho>>>
export type GetApiPedidoecommerceCarrinhoQueryError = ResponseError

/**
 * @summary Listar itens do carrinho de compra
 */
export const useGetApiPedidoecommerceCarrinho = <TError = ResponseError>(
  params: GetApiPedidoecommerceCarrinhoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPedidoecommerceCarrinho>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPedidoecommerceCarrinhoKey(params) : null);
  const swrFn = () => getApiPedidoecommerceCarrinho(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para baixado no MCN
 */
export const putApiPedidoecommerceBaixadosim = (
    params: PutApiPedidoecommerceBaixadosimParams,
 ) => {
    return customInstance<void>(
    {url: `/api/pedidoecommerce/baixadosim`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiPedidoecommerceBaixadosimMutationFetcher = (params: PutApiPedidoecommerceBaixadosimParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiPedidoecommerceBaixadosim(params);
  }
}
export const getPutApiPedidoecommerceBaixadosimMutationKey = (params: PutApiPedidoecommerceBaixadosimParams,) => [`/api/pedidoecommerce/baixadosim`, ...(params ? [params]: [])] as const;

export type PutApiPedidoecommerceBaixadosimMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidoecommerceBaixadosim>>>
export type PutApiPedidoecommerceBaixadosimMutationError = ResponseError

/**
 * @summary Mudar pedido para baixado no MCN
 */
export const usePutApiPedidoecommerceBaixadosim = <TError = ResponseError>(
  params: PutApiPedidoecommerceBaixadosimParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidoecommerceBaixadosim>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiPedidoecommerceBaixadosim>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidoecommerceBaixadosimMutationKey(params);
  const swrFn = getPutApiPedidoecommerceBaixadosimMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir pedido
 */
export const postApiPedidoecommerce = (
    pedidoEcommerceDto: PedidoEcommerceDto,
 ) => {
    return customInstance<RetornoPedido>(
    {url: `/api/pedidoecommerce`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pedidoEcommerceDto
    },
    );
  }



export const getPostApiPedidoecommerceMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: PedidoEcommerceDto }): Promise<RetornoPedido> => {
    return postApiPedidoecommerce(arg);
  }
}
export const getPostApiPedidoecommerceMutationKey = () => [`/api/pedidoecommerce`] as const;

export type PostApiPedidoecommerceMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPedidoecommerce>>>
export type PostApiPedidoecommerceMutationError = ResponseError

/**
 * @summary Incluir pedido
 */
export const usePostApiPedidoecommerce = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPedidoecommerce>>, TError, Key, PedidoEcommerceDto, Awaited<ReturnType<typeof postApiPedidoecommerce>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPedidoecommerceMutationKey();
  const swrFn = getPostApiPedidoecommerceMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar pedido n√£o baixado para o MCN
 */
export const getApiPedidoecommerce = (
    params: GetApiPedidoecommerceParams,
 ) => {
    return customInstance<PedidoEcommerceLeituraDto[]>(
    {url: `/api/pedidoecommerce`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPedidoecommerceKey = (params: GetApiPedidoecommerceParams,) => [`/api/pedidoecommerce`, ...(params ? [params]: [])] as const;

export type GetApiPedidoecommerceQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPedidoecommerce>>>
export type GetApiPedidoecommerceQueryError = ResponseError

/**
 * @summary Listar pedido n√£o baixado para o MCN
 */
export const useGetApiPedidoecommerce = <TError = ResponseError>(
  params: GetApiPedidoecommerceParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPedidoecommerce>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPedidoecommerceKey(params) : null);
  const swrFn = () => getApiPedidoecommerce(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar pedido por per√≠odo
 */
export const getApiPedidoecommerceListar = (
    params: GetApiPedidoecommerceListarParams,
 ) => {
    return customInstance<PedidoEcommerceLeituraDto>(
    {url: `/api/pedidoecommerce/listar`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPedidoecommerceListarKey = (params: GetApiPedidoecommerceListarParams,) => [`/api/pedidoecommerce/listar`, ...(params ? [params]: [])] as const;

export type GetApiPedidoecommerceListarQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPedidoecommerceListar>>>
export type GetApiPedidoecommerceListarQueryError = ResponseError

/**
 * @summary Listar pedido por per√≠odo
 */
export const useGetApiPedidoecommerceListar = <TError = ResponseError>(
  params: GetApiPedidoecommerceListarParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPedidoecommerceListar>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPedidoecommerceListarKey(params) : null);
  const swrFn = () => getApiPedidoecommerceListar(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para n√£o baixado no MCN
 */
export const putApiPedidoecommerceBaixadonao = (
    params: PutApiPedidoecommerceBaixadonaoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/pedidoecommerce/baixadonao`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiPedidoecommerceBaixadonaoMutationFetcher = (params: PutApiPedidoecommerceBaixadonaoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiPedidoecommerceBaixadonao(params);
  }
}
export const getPutApiPedidoecommerceBaixadonaoMutationKey = (params: PutApiPedidoecommerceBaixadonaoParams,) => [`/api/pedidoecommerce/baixadonao`, ...(params ? [params]: [])] as const;

export type PutApiPedidoecommerceBaixadonaoMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidoecommerceBaixadonao>>>
export type PutApiPedidoecommerceBaixadonaoMutationError = ResponseError

/**
 * @summary Mudar pedido para n√£o baixado no MCN
 */
export const usePutApiPedidoecommerceBaixadonao = <TError = ResponseError>(
  params: PutApiPedidoecommerceBaixadonaoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidoecommerceBaixadonao>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiPedidoecommerceBaixadonao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidoecommerceBaixadonaoMutationKey(params);
  const swrFn = getPutApiPedidoecommerceBaixadonaoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Enviar e-mail
 */
export const postApiEmail = (
    emailDto: EmailDto,
 ) => {
    return customInstance<void>(
    {url: `/api/email`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailDto
    },
    );
  }



export const getPostApiEmailMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: EmailDto }): Promise<void> => {
    return postApiEmail(arg);
  }
}
export const getPostApiEmailMutationKey = () => [`/api/email`] as const;

export type PostApiEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmail>>>
export type PostApiEmailMutationError = ResponseError

/**
 * @summary Enviar e-mail
 */
export const usePostApiEmail = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEmail>>, TError, Key, EmailDto, Awaited<ReturnType<typeof postApiEmail>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEmailMutationKey();
  const swrFn = getPostApiEmailMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar empresas
 */
export const getApiEmpresa = (
    params: GetApiEmpresaParams,
 ) => {
    return customInstance<EmpresaDto[]>(
    {url: `/api/empresa`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEmpresaKey = (params: GetApiEmpresaParams,) => [`/api/empresa`, ...(params ? [params]: [])] as const;

export type GetApiEmpresaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmpresa>>>
export type GetApiEmpresaQueryError = ResponseError

/**
 * @summary Listar empresas
 */
export const useGetApiEmpresa = <TError = ResponseError>(
  params: GetApiEmpresaParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEmpresa>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEmpresaKey(params) : null);
  const swrFn = () => getApiEmpresa(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir empresa
 */
export const postApiEmpresa = (
    empresaDto: EmpresaDto,
 ) => {
    return customInstance<void>(
    {url: `/api/empresa`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: empresaDto
    },
    );
  }



export const getPostApiEmpresaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: EmpresaDto }): Promise<void> => {
    return postApiEmpresa(arg);
  }
}
export const getPostApiEmpresaMutationKey = () => [`/api/empresa`] as const;

export type PostApiEmpresaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmpresa>>>
export type PostApiEmpresaMutationError = unknown

/**
 * @summary Incluir empresa
 */
export const usePostApiEmpresa = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEmpresa>>, TError, Key, EmpresaDto, Awaited<ReturnType<typeof postApiEmpresa>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEmpresaMutationKey();
  const swrFn = getPostApiEmpresaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir rede social
 */
export const postApiEmpresaRedesocial = (
    redeSocialDto: RedeSocialDto,
 ) => {
    return customInstance<void>(
    {url: `/api/empresa/redesocial`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: redeSocialDto
    },
    );
  }



export const getPostApiEmpresaRedesocialMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: RedeSocialDto }): Promise<void> => {
    return postApiEmpresaRedesocial(arg);
  }
}
export const getPostApiEmpresaRedesocialMutationKey = () => [`/api/empresa/redesocial`] as const;

export type PostApiEmpresaRedesocialMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmpresaRedesocial>>>
export type PostApiEmpresaRedesocialMutationError = unknown

/**
 * @summary Incluir rede social
 */
export const usePostApiEmpresaRedesocial = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEmpresaRedesocial>>, TError, Key, RedeSocialDto, Awaited<ReturnType<typeof postApiEmpresaRedesocial>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEmpresaRedesocialMutationKey();
  const swrFn = getPostApiEmpresaRedesocialMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar rede social
 */
export const getApiEmpresaRedesocial = (
    params: GetApiEmpresaRedesocialParams,
 ) => {
    return customInstance<RedeSocialDto[]>(
    {url: `/api/empresa/redesocial`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEmpresaRedesocialKey = (params: GetApiEmpresaRedesocialParams,) => [`/api/empresa/redesocial`, ...(params ? [params]: [])] as const;

export type GetApiEmpresaRedesocialQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmpresaRedesocial>>>
export type GetApiEmpresaRedesocialQueryError = ResponseError

/**
 * @summary Listar rede social
 */
export const useGetApiEmpresaRedesocial = <TError = ResponseError>(
  params: GetApiEmpresaRedesocialParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEmpresaRedesocial>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEmpresaRedesocialKey(params) : null);
  const swrFn = () => getApiEmpresaRedesocial(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar contratos agrupados
 */
export const getApiEmpresaContratosAgrupados = (
    
 ) => {
    return customInstance<ContratoAgrupadoDto[]>(
    {url: `/api/empresa/contratos/agrupados`, method: 'GET'
    },
    );
  }



export const getGetApiEmpresaContratosAgrupadosKey = () => [`/api/empresa/contratos/agrupados`] as const;

export type GetApiEmpresaContratosAgrupadosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmpresaContratosAgrupados>>>
export type GetApiEmpresaContratosAgrupadosQueryError = ResponseError

/**
 * @summary Listar contratos agrupados
 */
export const useGetApiEmpresaContratosAgrupados = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEmpresaContratosAgrupados>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEmpresaContratosAgrupadosKey() : null);
  const swrFn = () => getApiEmpresaContratosAgrupados()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir contrato agrupado
 */
export const postApiEmpresaContratosAgrupados = (
    contratoAgrupadoDto: ContratoAgrupadoDto,
 ) => {
    return customInstance<void>(
    {url: `/api/empresa/contratos/agrupados`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: contratoAgrupadoDto
    },
    );
  }



export const getPostApiEmpresaContratosAgrupadosMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ContratoAgrupadoDto }): Promise<void> => {
    return postApiEmpresaContratosAgrupados(arg);
  }
}
export const getPostApiEmpresaContratosAgrupadosMutationKey = () => [`/api/empresa/contratos/agrupados`] as const;

export type PostApiEmpresaContratosAgrupadosMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmpresaContratosAgrupados>>>
export type PostApiEmpresaContratosAgrupadosMutationError = unknown

/**
 * @summary Incluir contrato agrupado
 */
export const usePostApiEmpresaContratosAgrupados = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEmpresaContratosAgrupados>>, TError, Key, ContratoAgrupadoDto, Awaited<ReturnType<typeof postApiEmpresaContratosAgrupados>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEmpresaContratosAgrupadosMutationKey();
  const swrFn = getPostApiEmpresaContratosAgrupadosMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir banner
 */
export const postApiEmpresaBanner = (
    empresaBannerDto: EmpresaBannerDto,
 ) => {
    return customInstance<void>(
    {url: `/api/empresa/banner`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: empresaBannerDto
    },
    );
  }



export const getPostApiEmpresaBannerMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: EmpresaBannerDto }): Promise<void> => {
    return postApiEmpresaBanner(arg);
  }
}
export const getPostApiEmpresaBannerMutationKey = () => [`/api/empresa/banner`] as const;

export type PostApiEmpresaBannerMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmpresaBanner>>>
export type PostApiEmpresaBannerMutationError = unknown

/**
 * @summary Incluir banner
 */
export const usePostApiEmpresaBanner = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEmpresaBanner>>, TError, Key, EmpresaBannerDto, Awaited<ReturnType<typeof postApiEmpresaBanner>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEmpresaBannerMutationKey();
  const swrFn = getPostApiEmpresaBannerMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar banners
 */
export const getApiEmpresaBanner = (
    params: GetApiEmpresaBannerParams,
 ) => {
    return customInstance<BannerDto[]>(
    {url: `/api/empresa/banner`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEmpresaBannerKey = (params: GetApiEmpresaBannerParams,) => [`/api/empresa/banner`, ...(params ? [params]: [])] as const;

export type GetApiEmpresaBannerQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmpresaBanner>>>
export type GetApiEmpresaBannerQueryError = ResponseError

/**
 * @summary Listar banners
 */
export const useGetApiEmpresaBanner = <TError = ResponseError>(
  params: GetApiEmpresaBannerParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEmpresaBanner>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEmpresaBannerKey(params) : null);
  const swrFn = () => getApiEmpresaBanner(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir layout de relat√≥rio
 */
export const postApiEmpresaRelatorio = (
    relatorioDto: RelatorioDto,
 ) => {
    return customInstance<void>(
    {url: `/api/empresa/relatorio`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: relatorioDto
    },
    );
  }



export const getPostApiEmpresaRelatorioMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: RelatorioDto }): Promise<void> => {
    return postApiEmpresaRelatorio(arg);
  }
}
export const getPostApiEmpresaRelatorioMutationKey = () => [`/api/empresa/relatorio`] as const;

export type PostApiEmpresaRelatorioMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmpresaRelatorio>>>
export type PostApiEmpresaRelatorioMutationError = unknown

/**
 * @summary Incluir layout de relat√≥rio
 */
export const usePostApiEmpresaRelatorio = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEmpresaRelatorio>>, TError, Key, RelatorioDto, Awaited<ReturnType<typeof postApiEmpresaRelatorio>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEmpresaRelatorioMutationKey();
  const swrFn = getPostApiEmpresaRelatorioMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar contratos
 */
export const getApiEmpresaContratos = (
    
 ) => {
    return customInstance<ContratoDto[]>(
    {url: `/api/empresa/contratos`, method: 'GET'
    },
    );
  }



export const getGetApiEmpresaContratosKey = () => [`/api/empresa/contratos`] as const;

export type GetApiEmpresaContratosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmpresaContratos>>>
export type GetApiEmpresaContratosQueryError = ResponseError

/**
 * @summary Listar contratos
 */
export const useGetApiEmpresaContratos = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEmpresaContratos>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEmpresaContratosKey() : null);
  const swrFn = () => getApiEmpresaContratos()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary atualizar ultima sincroniza√ß√£o de dados
 */
export const putApiEmpresaUltimasincronizacao = (
    params: PutApiEmpresaUltimasincronizacaoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/empresa/ultimasincronizacao`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiEmpresaUltimasincronizacaoMutationFetcher = (params: PutApiEmpresaUltimasincronizacaoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiEmpresaUltimasincronizacao(params);
  }
}
export const getPutApiEmpresaUltimasincronizacaoMutationKey = (params: PutApiEmpresaUltimasincronizacaoParams,) => [`/api/empresa/ultimasincronizacao`, ...(params ? [params]: [])] as const;

export type PutApiEmpresaUltimasincronizacaoMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmpresaUltimasincronizacao>>>
export type PutApiEmpresaUltimasincronizacaoMutationError = ResponseError

/**
 * @summary atualizar ultima sincroniza√ß√£o de dados
 */
export const usePutApiEmpresaUltimasincronizacao = <TError = ResponseError>(
  params: PutApiEmpresaUltimasincronizacaoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiEmpresaUltimasincronizacao>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiEmpresaUltimasincronizacao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiEmpresaUltimasincronizacaoMutationKey(params);
  const swrFn = getPutApiEmpresaUltimasincronizacaoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir
 */
export const postApiParametroPermissao = (
    permissaoDto: PermissaoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/parametro/permissao`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: permissaoDto
    },
    );
  }



export const getPostApiParametroPermissaoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: PermissaoDto[] }): Promise<void> => {
    return postApiParametroPermissao(arg);
  }
}
export const getPostApiParametroPermissaoMutationKey = () => [`/api/parametro/permissao`] as const;

export type PostApiParametroPermissaoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiParametroPermissao>>>
export type PostApiParametroPermissaoMutationError = ResponseError

/**
 * @summary Incluir
 */
export const usePostApiParametroPermissao = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiParametroPermissao>>, TError, Key, PermissaoDto[], Awaited<ReturnType<typeof postApiParametroPermissao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiParametroPermissaoMutationKey();
  const swrFn = getPostApiParametroPermissaoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Ler permiss√µes do usu√°rio
 */
export const getApiParametroPermissao = (
    params: GetApiParametroPermissaoParams,
 ) => {
    return customInstance<PermissaoDto>(
    {url: `/api/parametro/permissao`, method: 'GET',
        params
    },
    );
  }



export const getGetApiParametroPermissaoKey = (params: GetApiParametroPermissaoParams,) => [`/api/parametro/permissao`, ...(params ? [params]: [])] as const;

export type GetApiParametroPermissaoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiParametroPermissao>>>
export type GetApiParametroPermissaoQueryError = ResponseError

/**
 * @summary Ler permiss√µes do usu√°rio
 */
export const useGetApiParametroPermissao = <TError = ResponseError>(
  params: GetApiParametroPermissaoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiParametroPermissao>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiParametroPermissaoKey(params) : null);
  const swrFn = () => getApiParametroPermissao(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir
 */
export const deleteApiParametroPermissao = (
    
 ) => {
    return customInstance<void>(
    {url: `/api/parametro/permissao`, method: 'DELETE'
    },
    );
  }



export const getDeleteApiParametroPermissaoMutationFetcher = ( ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiParametroPermissao();
  }
}
export const getDeleteApiParametroPermissaoMutationKey = () => [`/api/parametro/permissao`] as const;

export type DeleteApiParametroPermissaoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiParametroPermissao>>>
export type DeleteApiParametroPermissaoMutationError = ResponseError

/**
 * @summary Excluir
 */
export const useDeleteApiParametroPermissao = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiParametroPermissao>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiParametroPermissao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiParametroPermissaoMutationKey();
  const swrFn = getDeleteApiParametroPermissaoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Ler parametro
 */
export const getApiParametroParametro = (
    params: GetApiParametroParametroParams,
 ) => {
    return customInstance<ParametroDto>(
    {url: `/api/parametro/parametro`, method: 'GET',
        params
    },
    );
  }



export const getGetApiParametroParametroKey = (params: GetApiParametroParametroParams,) => [`/api/parametro/parametro`, ...(params ? [params]: [])] as const;

export type GetApiParametroParametroQueryResult = NonNullable<Awaited<ReturnType<typeof getApiParametroParametro>>>
export type GetApiParametroParametroQueryError = ResponseError

/**
 * @summary Ler parametro
 */
export const useGetApiParametroParametro = <TError = ResponseError>(
  params: GetApiParametroParametroParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiParametroParametro>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiParametroParametroKey(params) : null);
  const swrFn = () => getApiParametroParametro(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir
 */
export const postApiParametro = (
    parametroDtoArrayBody: ParametroDtoArrayBody,
 ) => {
    return customInstance<void>(
    {url: `/api/parametro`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: parametroDtoArrayBody
    },
    );
  }



export const getPostApiParametroMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ParametroDtoArrayBody }): Promise<void> => {
    return postApiParametro(arg);
  }
}
export const getPostApiParametroMutationKey = () => [`/api/parametro`] as const;

export type PostApiParametroMutationResult = NonNullable<Awaited<ReturnType<typeof postApiParametro>>>
export type PostApiParametroMutationError = ResponseError

/**
 * @summary Incluir
 */
export const usePostApiParametro = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiParametro>>, TError, Key, ParametroDtoArrayBody, Awaited<ReturnType<typeof postApiParametro>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiParametroMutationKey();
  const swrFn = getPostApiParametroMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar parametros
 */
export const getApiParametro = (
    params: GetApiParametroParams,
 ) => {
    return customInstance<ParametroDto[]>(
    {url: `/api/parametro`, method: 'GET',
        params
    },
    );
  }



export const getGetApiParametroKey = (params: GetApiParametroParams,) => [`/api/parametro`, ...(params ? [params]: [])] as const;

export type GetApiParametroQueryResult = NonNullable<Awaited<ReturnType<typeof getApiParametro>>>
export type GetApiParametroQueryError = ResponseError

/**
 * @summary Listar parametros
 */
export const useGetApiParametro = <TError = ResponseError>(
  params: GetApiParametroParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiParametro>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiParametroKey(params) : null);
  const swrFn = () => getApiParametro(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir
 */
export const deleteApiParametro = (
    
 ) => {
    return customInstance<void>(
    {url: `/api/parametro`, method: 'DELETE'
    },
    );
  }



export const getDeleteApiParametroMutationFetcher = ( ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiParametro();
  }
}
export const getDeleteApiParametroMutationKey = () => [`/api/parametro`] as const;

export type DeleteApiParametroMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiParametro>>>
export type DeleteApiParametroMutationError = ResponseError

/**
 * @summary Excluir
 */
export const useDeleteApiParametro = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiParametro>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiParametro>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiParametroMutationKey();
  const swrFn = getDeleteApiParametroMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir saldo do produto da lista de casamento
 */
export const deleteApiListacasamentoSaldo = (
    params: DeleteApiListacasamentoSaldoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/listacasamento/saldo`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiListacasamentoSaldoMutationFetcher = (params: DeleteApiListacasamentoSaldoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiListacasamentoSaldo(params);
  }
}
export const getDeleteApiListacasamentoSaldoMutationKey = (params: DeleteApiListacasamentoSaldoParams,) => [`/api/listacasamento/saldo`, ...(params ? [params]: [])] as const;

export type DeleteApiListacasamentoSaldoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiListacasamentoSaldo>>>
export type DeleteApiListacasamentoSaldoMutationError = ResponseError

/**
 * @summary Excluir saldo do produto da lista de casamento
 */
export const useDeleteApiListacasamentoSaldo = <TError = ResponseError>(
  params: DeleteApiListacasamentoSaldoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiListacasamentoSaldo>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiListacasamentoSaldo>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiListacasamentoSaldoMutationKey(params);
  const swrFn = getDeleteApiListacasamentoSaldoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Saldo da lista de casamento
 */
export const getApiListacasamentoSaldo = (
    params: GetApiListacasamentoSaldoParams,
 ) => {
    return customInstance<ListaCasamentoSaldoLeituraDto[]>(
    {url: `/api/listacasamento/saldo`, method: 'GET',
        params
    },
    );
  }



export const getGetApiListacasamentoSaldoKey = (params: GetApiListacasamentoSaldoParams,) => [`/api/listacasamento/saldo`, ...(params ? [params]: [])] as const;

export type GetApiListacasamentoSaldoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiListacasamentoSaldo>>>
export type GetApiListacasamentoSaldoQueryError = ResponseError

/**
 * @summary Saldo da lista de casamento
 */
export const useGetApiListacasamentoSaldo = <TError = ResponseError>(
  params: GetApiListacasamentoSaldoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiListacasamentoSaldo>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiListacasamentoSaldoKey(params) : null);
  const swrFn = () => getApiListacasamentoSaldo(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir saldo da lista de casamento
 */
export const postApiListacasamentoSaldo = (
    listaCasamentoSaldoDto: ListaCasamentoSaldoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/listacasamento/saldo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: listaCasamentoSaldoDto
    },
    );
  }



export const getPostApiListacasamentoSaldoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ListaCasamentoSaldoDto[] }): Promise<void> => {
    return postApiListacasamentoSaldo(arg);
  }
}
export const getPostApiListacasamentoSaldoMutationKey = () => [`/api/listacasamento/saldo`] as const;

export type PostApiListacasamentoSaldoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiListacasamentoSaldo>>>
export type PostApiListacasamentoSaldoMutationError = ResponseError

/**
 * @summary Incluir saldo da lista de casamento
 */
export const usePostApiListacasamentoSaldo = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiListacasamentoSaldo>>, TError, Key, ListaCasamentoSaldoDto[], Awaited<ReturnType<typeof postApiListacasamentoSaldo>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiListacasamentoSaldoMutationKey();
  const swrFn = getPostApiListacasamentoSaldoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir lista de casamento
 */
export const postApiListacasamento = (
    listaCasamentoDto: ListaCasamentoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/listacasamento`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: listaCasamentoDto
    },
    );
  }



export const getPostApiListacasamentoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ListaCasamentoDto[] }): Promise<void> => {
    return postApiListacasamento(arg);
  }
}
export const getPostApiListacasamentoMutationKey = () => [`/api/listacasamento`] as const;

export type PostApiListacasamentoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiListacasamento>>>
export type PostApiListacasamentoMutationError = ResponseError

/**
 * @summary Incluir lista de casamento
 */
export const usePostApiListacasamento = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiListacasamento>>, TError, Key, ListaCasamentoDto[], Awaited<ReturnType<typeof postApiListacasamento>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiListacasamentoMutationKey();
  const swrFn = getPostApiListacasamentoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir de lista de casamento
 */
export const deleteApiListacasamento = (
    params: DeleteApiListacasamentoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/listacasamento`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiListacasamentoMutationFetcher = (params: DeleteApiListacasamentoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiListacasamento(params);
  }
}
export const getDeleteApiListacasamentoMutationKey = (params: DeleteApiListacasamentoParams,) => [`/api/listacasamento`, ...(params ? [params]: [])] as const;

export type DeleteApiListacasamentoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiListacasamento>>>
export type DeleteApiListacasamentoMutationError = ResponseError

/**
 * @summary Excluir de lista de casamento
 */
export const useDeleteApiListacasamento = <TError = ResponseError>(
  params: DeleteApiListacasamentoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiListacasamento>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiListacasamento>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiListacasamentoMutationKey(params);
  const swrFn = getDeleteApiListacasamentoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Lista de casamento
 */
export const getApiListacasamento = (
    params: GetApiListacasamentoParams,
 ) => {
    return customInstance<ListaCasamentoLeituraDto[]>(
    {url: `/api/listacasamento`, method: 'GET',
        params
    },
    );
  }



export const getGetApiListacasamentoKey = (params: GetApiListacasamentoParams,) => [`/api/listacasamento`, ...(params ? [params]: [])] as const;

export type GetApiListacasamentoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiListacasamento>>>
export type GetApiListacasamentoQueryError = ResponseError

/**
 * @summary Lista de casamento
 */
export const useGetApiListacasamento = <TError = ResponseError>(
  params: GetApiListacasamentoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiListacasamento>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiListacasamentoKey(params) : null);
  const swrFn = () => getApiListacasamento(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Rela√ß√£o de Lista de casamento v√°lida
 */
export const getApiListacasamentoValida = (
    
 ) => {
    return customInstance<ListaCasamentoValidaDto[]>(
    {url: `/api/listacasamento/valida`, method: 'GET'
    },
    );
  }



export const getGetApiListacasamentoValidaKey = () => [`/api/listacasamento/valida`] as const;

export type GetApiListacasamentoValidaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiListacasamentoValida>>>
export type GetApiListacasamentoValidaQueryError = ResponseError

/**
 * @summary Rela√ß√£o de Lista de casamento v√°lida
 */
export const useGetApiListacasamentoValida = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiListacasamentoValida>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiListacasamentoValidaKey() : null);
  const swrFn = () => getApiListacasamentoValida()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Retorna arquivo PDF do pedido mobile
 */
export const getApiPedidomobilePdfPedidoId = (
    params: GetApiPedidomobilePdfPedidoIdParams,
 ) => {
    return customInstance<unknown>(
    {url: `/api/pedidomobile/pdf/pedido_id`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPedidomobilePdfPedidoIdKey = (params: GetApiPedidomobilePdfPedidoIdParams,) => [`/api/pedidomobile/pdf/pedido_id`, ...(params ? [params]: [])] as const;

export type GetApiPedidomobilePdfPedidoIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPedidomobilePdfPedidoId>>>
export type GetApiPedidomobilePdfPedidoIdQueryError = ResponseError

/**
 * @summary Retorna arquivo PDF do pedido mobile
 */
export const useGetApiPedidomobilePdfPedidoId = <TError = ResponseError>(
  params: GetApiPedidomobilePdfPedidoIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPedidomobilePdfPedidoId>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPedidomobilePdfPedidoIdKey(params) : null);
  const swrFn = () => getApiPedidomobilePdfPedidoId(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para baixado no MCN
 */
export const putApiPedidomobileBaixadosim = (
    params: PutApiPedidomobileBaixadosimParams,
 ) => {
    return customInstance<void>(
    {url: `/api/pedidomobile/baixadosim`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiPedidomobileBaixadosimMutationFetcher = (params: PutApiPedidomobileBaixadosimParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiPedidomobileBaixadosim(params);
  }
}
export const getPutApiPedidomobileBaixadosimMutationKey = (params: PutApiPedidomobileBaixadosimParams,) => [`/api/pedidomobile/baixadosim`, ...(params ? [params]: [])] as const;

export type PutApiPedidomobileBaixadosimMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidomobileBaixadosim>>>
export type PutApiPedidomobileBaixadosimMutationError = ResponseError

/**
 * @summary Mudar pedido para baixado no MCN
 */
export const usePutApiPedidomobileBaixadosim = <TError = ResponseError>(
  params: PutApiPedidomobileBaixadosimParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidomobileBaixadosim>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiPedidomobileBaixadosim>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidomobileBaixadosimMutationKey(params);
  const swrFn = getPutApiPedidomobileBaixadosimMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para n√£o liberado para faturar
 */
export const putApiPedidomobileLiberarnao = (
    params: PutApiPedidomobileLiberarnaoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/pedidomobile/liberarnao`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiPedidomobileLiberarnaoMutationFetcher = (params: PutApiPedidomobileLiberarnaoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiPedidomobileLiberarnao(params);
  }
}
export const getPutApiPedidomobileLiberarnaoMutationKey = (params: PutApiPedidomobileLiberarnaoParams,) => [`/api/pedidomobile/liberarnao`, ...(params ? [params]: [])] as const;

export type PutApiPedidomobileLiberarnaoMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidomobileLiberarnao>>>
export type PutApiPedidomobileLiberarnaoMutationError = ResponseError

/**
 * @summary Mudar pedido para n√£o liberado para faturar
 */
export const usePutApiPedidomobileLiberarnao = <TError = ResponseError>(
  params: PutApiPedidomobileLiberarnaoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidomobileLiberarnao>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiPedidomobileLiberarnao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidomobileLiberarnaoMutationKey(params);
  const swrFn = getPutApiPedidomobileLiberarnaoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para ativo
 */
export const putApiPedidomobileAtivar = (
    params: PutApiPedidomobileAtivarParams,
 ) => {
    return customInstance<void>(
    {url: `/api/pedidomobile/ativar`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiPedidomobileAtivarMutationFetcher = (params: PutApiPedidomobileAtivarParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiPedidomobileAtivar(params);
  }
}
export const getPutApiPedidomobileAtivarMutationKey = (params: PutApiPedidomobileAtivarParams,) => [`/api/pedidomobile/ativar`, ...(params ? [params]: [])] as const;

export type PutApiPedidomobileAtivarMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidomobileAtivar>>>
export type PutApiPedidomobileAtivarMutationError = ResponseError

/**
 * @summary Mudar pedido para ativo
 */
export const usePutApiPedidomobileAtivar = <TError = ResponseError>(
  params: PutApiPedidomobileAtivarParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidomobileAtivar>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiPedidomobileAtivar>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidomobileAtivarMutationKey(params);
  const swrFn = getPutApiPedidomobileAtivarMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para n√£o baixado no MCN
 */
export const putApiPedidomobileBaixadonao = (
    params: PutApiPedidomobileBaixadonaoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/pedidomobile/baixadonao`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiPedidomobileBaixadonaoMutationFetcher = (params: PutApiPedidomobileBaixadonaoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiPedidomobileBaixadonao(params);
  }
}
export const getPutApiPedidomobileBaixadonaoMutationKey = (params: PutApiPedidomobileBaixadonaoParams,) => [`/api/pedidomobile/baixadonao`, ...(params ? [params]: [])] as const;

export type PutApiPedidomobileBaixadonaoMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidomobileBaixadonao>>>
export type PutApiPedidomobileBaixadonaoMutationError = ResponseError

/**
 * @summary Mudar pedido para n√£o baixado no MCN
 */
export const usePutApiPedidomobileBaixadonao = <TError = ResponseError>(
  params: PutApiPedidomobileBaixadonaoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidomobileBaixadonao>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiPedidomobileBaixadonao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidomobileBaixadonaoMutationKey(params);
  const swrFn = getPutApiPedidomobileBaixadonaoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para liberado para faturar
 */
export const putApiPedidomobileLiberarsim = (
    retornoPedido: RetornoPedido[],
 ) => {
    return customInstance<void>(
    {url: `/api/pedidomobile/liberarsim`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: retornoPedido
    },
    );
  }



export const getPutApiPedidomobileLiberarsimMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: RetornoPedido[] }): Promise<void> => {
    return putApiPedidomobileLiberarsim(arg);
  }
}
export const getPutApiPedidomobileLiberarsimMutationKey = () => [`/api/pedidomobile/liberarsim`] as const;

export type PutApiPedidomobileLiberarsimMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidomobileLiberarsim>>>
export type PutApiPedidomobileLiberarsimMutationError = ResponseError

/**
 * @summary Mudar pedido para liberado para faturar
 */
export const usePutApiPedidomobileLiberarsim = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidomobileLiberarsim>>, TError, Key, RetornoPedido[], Awaited<ReturnType<typeof putApiPedidomobileLiberarsim>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidomobileLiberarsimMutationKey();
  const swrFn = getPutApiPedidomobileLiberarsimMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar pedido mobile por per√≠odo
 */
export const getApiPedidomobileListar = (
    params: GetApiPedidomobileListarParams,
 ) => {
    return customInstance<PedidoLeituraDto[]>(
    {url: `/api/pedidomobile/listar`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPedidomobileListarKey = (params: GetApiPedidomobileListarParams,) => [`/api/pedidomobile/listar`, ...(params ? [params]: [])] as const;

export type GetApiPedidomobileListarQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPedidomobileListar>>>
export type GetApiPedidomobileListarQueryError = ResponseError

/**
 * @summary Listar pedido mobile por per√≠odo
 */
export const useGetApiPedidomobileListar = <TError = ResponseError>(
  params: GetApiPedidomobileListarParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPedidomobileListar>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPedidomobileListarKey(params) : null);
  const swrFn = () => getApiPedidomobileListar(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir pedido de venda
 */
export const postApiPedidomobile = (
    pedidoDto: PedidoDto,
 ) => {
    return customInstance<RetornoPedido>(
    {url: `/api/pedidomobile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pedidoDto
    },
    );
  }



export const getPostApiPedidomobileMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: PedidoDto }): Promise<RetornoPedido> => {
    return postApiPedidomobile(arg);
  }
}
export const getPostApiPedidomobileMutationKey = () => [`/api/pedidomobile`] as const;

export type PostApiPedidomobileMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPedidomobile>>>
export type PostApiPedidomobileMutationError = ResponseError

/**
 * @summary Incluir pedido de venda
 */
export const usePostApiPedidomobile = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPedidomobile>>, TError, Key, PedidoDto, Awaited<ReturnType<typeof postApiPedidomobile>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPedidomobileMutationKey();
  const swrFn = getPostApiPedidomobileMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar pedido externo n√£o baixado para o MCN
 */
export const getApiPedidomobile = (
    params: GetApiPedidomobileParams,
 ) => {
    return customInstance<PedidoLeituraDto[]>(
    {url: `/api/pedidomobile`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPedidomobileKey = (params: GetApiPedidomobileParams,) => [`/api/pedidomobile`, ...(params ? [params]: [])] as const;

export type GetApiPedidomobileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPedidomobile>>>
export type GetApiPedidomobileQueryError = ResponseError

/**
 * @summary Listar pedido externo n√£o baixado para o MCN
 */
export const useGetApiPedidomobile = <TError = ResponseError>(
  params: GetApiPedidomobileParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPedidomobile>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPedidomobileKey(params) : null);
  const swrFn = () => getApiPedidomobile(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Mudar pedido para inativo
 */
export const putApiPedidomobileInativar = (
    params: PutApiPedidomobileInativarParams,
 ) => {
    return customInstance<void>(
    {url: `/api/pedidomobile/inativar`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiPedidomobileInativarMutationFetcher = (params: PutApiPedidomobileInativarParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiPedidomobileInativar(params);
  }
}
export const getPutApiPedidomobileInativarMutationKey = (params: PutApiPedidomobileInativarParams,) => [`/api/pedidomobile/inativar`, ...(params ? [params]: [])] as const;

export type PutApiPedidomobileInativarMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPedidomobileInativar>>>
export type PutApiPedidomobileInativarMutationError = ResponseError

/**
 * @summary Mudar pedido para inativo
 */
export const usePutApiPedidomobileInativar = <TError = ResponseError>(
  params: PutApiPedidomobileInativarParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiPedidomobileInativar>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiPedidomobileInativar>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiPedidomobileInativarMutationKey(params);
  const swrFn = getPutApiPedidomobileInativarMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir
 */
export const postApiProduto = (
    produtoDto: ProdutoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/produto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: produtoDto
    },
    );
  }



export const getPostApiProdutoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ProdutoDto[] }): Promise<void> => {
    return postApiProduto(arg);
  }
}
export const getPostApiProdutoMutationKey = () => [`/api/produto`] as const;

export type PostApiProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProduto>>>
export type PostApiProdutoMutationError = ResponseError

/**
 * @summary Incluir
 */
export const usePostApiProduto = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiProduto>>, TError, Key, ProdutoDto[], Awaited<ReturnType<typeof postApiProduto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiProdutoMutationKey();
  const swrFn = getPostApiProdutoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar produtos
 */
export const getApiProduto = (
    params: GetApiProdutoParams,
 ) => {
    return customInstance<ProdutoDto[]>(
    {url: `/api/produto`, method: 'GET',
        params
    },
    );
  }



export const getGetApiProdutoKey = (params: GetApiProdutoParams,) => [`/api/produto`, ...(params ? [params]: [])] as const;

export type GetApiProdutoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProduto>>>
export type GetApiProdutoQueryError = ResponseError

/**
 * @summary Listar produtos
 */
export const useGetApiProduto = <TError = ResponseError>(
  params: GetApiProdutoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProduto>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoKey(params) : null);
  const swrFn = () => getApiProduto(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir produto 
 */
export const deleteApiProduto = (
    params: DeleteApiProdutoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/produto`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiProdutoMutationFetcher = (params: DeleteApiProdutoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiProduto(params);
  }
}
export const getDeleteApiProdutoMutationKey = (params: DeleteApiProdutoParams,) => [`/api/produto`, ...(params ? [params]: [])] as const;

export type DeleteApiProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProduto>>>
export type DeleteApiProdutoMutationError = ResponseError

/**
 * @summary Excluir produto 
 */
export const useDeleteApiProduto = <TError = ResponseError>(
  params: DeleteApiProdutoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiProduto>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiProduto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiProdutoMutationKey(params);
  const swrFn = getDeleteApiProdutoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar novos cadastros de produtos e-commerce
 */
export const getApiProdutoEcommerceNovos = (
    params: GetApiProdutoEcommerceNovosParams,
 ) => {
    return customInstance<ProdutosEcommerceDto[]>(
    {url: `/api/produto/ecommerce/novos`, method: 'GET',
        params
    },
    );
  }



export const getGetApiProdutoEcommerceNovosKey = (params: GetApiProdutoEcommerceNovosParams,) => [`/api/produto/ecommerce/novos`, ...(params ? [params]: [])] as const;

export type GetApiProdutoEcommerceNovosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoEcommerceNovos>>>
export type GetApiProdutoEcommerceNovosQueryError = ResponseError

/**
 * @summary Listar novos cadastros de produtos e-commerce
 */
export const useGetApiProdutoEcommerceNovos = <TError = ResponseError>(
  params: GetApiProdutoEcommerceNovosParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoEcommerceNovos>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoEcommerceNovosKey(params) : null);
  const swrFn = () => getApiProdutoEcommerceNovos(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir conversÔøΩo de unidade
 */
export const postApiProdutoConversao = (
    produtoConversaoDto: ProdutoConversaoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/produto/conversao`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: produtoConversaoDto
    },
    );
  }



export const getPostApiProdutoConversaoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ProdutoConversaoDto[] }): Promise<void> => {
    return postApiProdutoConversao(arg);
  }
}
export const getPostApiProdutoConversaoMutationKey = () => [`/api/produto/conversao`] as const;

export type PostApiProdutoConversaoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProdutoConversao>>>
export type PostApiProdutoConversaoMutationError = ResponseError

/**
 * @summary Incluir conversÔøΩo de unidade
 */
export const usePostApiProdutoConversao = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiProdutoConversao>>, TError, Key, ProdutoConversaoDto[], Awaited<ReturnType<typeof postApiProdutoConversao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiProdutoConversaoMutationKey();
  const swrFn = getPostApiProdutoConversaoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar conversÔøΩo de unidade
 */
export const getApiProdutoConversao = (
    params: GetApiProdutoConversaoParams,
 ) => {
    return customInstance<ProdutoConversaoDto[]>(
    {url: `/api/produto/conversao`, method: 'GET',
        params
    },
    );
  }



export const getGetApiProdutoConversaoKey = (params: GetApiProdutoConversaoParams,) => [`/api/produto/conversao`, ...(params ? [params]: [])] as const;

export type GetApiProdutoConversaoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoConversao>>>
export type GetApiProdutoConversaoQueryError = ResponseError

/**
 * @summary Listar conversÔøΩo de unidade
 */
export const useGetApiProdutoConversao = <TError = ResponseError>(
  params: GetApiProdutoConversaoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoConversao>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoConversaoKey(params) : null);
  const swrFn = () => getApiProdutoConversao(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir conversÔøΩo de unidade
 */
export const deleteApiProdutoConversao = (
    params: DeleteApiProdutoConversaoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/produto/conversao`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiProdutoConversaoMutationFetcher = (params: DeleteApiProdutoConversaoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiProdutoConversao(params);
  }
}
export const getDeleteApiProdutoConversaoMutationKey = (params: DeleteApiProdutoConversaoParams,) => [`/api/produto/conversao`, ...(params ? [params]: [])] as const;

export type DeleteApiProdutoConversaoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProdutoConversao>>>
export type DeleteApiProdutoConversaoMutationError = ResponseError

/**
 * @summary Excluir conversÔøΩo de unidade
 */
export const useDeleteApiProdutoConversao = <TError = ResponseError>(
  params: DeleteApiProdutoConversaoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiProdutoConversao>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiProdutoConversao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiProdutoConversaoMutationKey(params);
  const swrFn = getDeleteApiProdutoConversaoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar grupo 
 */
export const getApiProdutoGrupo = (
    
 ) => {
    return customInstance<ProdutoGrupoDto[]>(
    {url: `/api/produto/grupo`, method: 'GET'
    },
    );
  }



export const getGetApiProdutoGrupoKey = () => [`/api/produto/grupo`] as const;

export type GetApiProdutoGrupoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoGrupo>>>
export type GetApiProdutoGrupoQueryError = ResponseError

/**
 * @summary Listar grupo 
 */
export const useGetApiProdutoGrupo = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoGrupo>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoGrupoKey() : null);
  const swrFn = () => getApiProdutoGrupo()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar produtos e-commerce paginado
 */
export const getApiProdutoEcommercePaginado = (
    params: GetApiProdutoEcommercePaginadoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/produto/ecommerce/paginado`, method: 'GET',
        params
    },
    );
  }



export const getGetApiProdutoEcommercePaginadoKey = (params: GetApiProdutoEcommercePaginadoParams,) => [`/api/produto/ecommerce/paginado`, ...(params ? [params]: [])] as const;

export type GetApiProdutoEcommercePaginadoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoEcommercePaginado>>>
export type GetApiProdutoEcommercePaginadoQueryError = ResponseError

/**
 * @summary Listar produtos e-commerce paginado
 */
export const useGetApiProdutoEcommercePaginado = <TError = ResponseError>(
  params: GetApiProdutoEcommercePaginadoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoEcommercePaginado>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoEcommercePaginadoKey(params) : null);
  const swrFn = () => getApiProdutoEcommercePaginado(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar subgrupo
 */
export const getApiProdutoSubgrupo = (
    
 ) => {
    return customInstance<ProdutoSubGrupoDto[]>(
    {url: `/api/produto/subgrupo`, method: 'GET'
    },
    );
  }



export const getGetApiProdutoSubgrupoKey = () => [`/api/produto/subgrupo`] as const;

export type GetApiProdutoSubgrupoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoSubgrupo>>>
export type GetApiProdutoSubgrupoQueryError = ResponseError

/**
 * @summary Listar subgrupo
 */
export const useGetApiProdutoSubgrupo = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoSubgrupo>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoSubgrupoKey() : null);
  const swrFn = () => getApiProdutoSubgrupo()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar categoria
 */
export const getApiProdutoCategoria = (
    
 ) => {
    return customInstance<ProdutoCategoriaDto[]>(
    {url: `/api/produto/categoria`, method: 'GET'
    },
    );
  }



export const getGetApiProdutoCategoriaKey = () => [`/api/produto/categoria`] as const;

export type GetApiProdutoCategoriaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoCategoria>>>
export type GetApiProdutoCategoriaQueryError = ResponseError

/**
 * @summary Listar categoria
 */
export const useGetApiProdutoCategoria = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoCategoria>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoCategoriaKey() : null);
  const swrFn = () => getApiProdutoCategoria()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir foto
 */
export const postApiProdutoFoto = (
    produtoFotoDto: ProdutoFotoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/produto/foto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: produtoFotoDto
    },
    );
  }



export const getPostApiProdutoFotoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ProdutoFotoDto[] }): Promise<void> => {
    return postApiProdutoFoto(arg);
  }
}
export const getPostApiProdutoFotoMutationKey = () => [`/api/produto/foto`] as const;

export type PostApiProdutoFotoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProdutoFoto>>>
export type PostApiProdutoFotoMutationError = ResponseError

/**
 * @summary Incluir foto
 */
export const usePostApiProdutoFoto = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiProdutoFoto>>, TError, Key, ProdutoFotoDto[], Awaited<ReturnType<typeof postApiProdutoFoto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiProdutoFotoMutationKey();
  const swrFn = getPostApiProdutoFotoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar produtos e-commerce
 */
export const getApiProdutoEcommerce = (
    params: GetApiProdutoEcommerceParams,
 ) => {
    return customInstance<ProdutosEcommerceDto[]>(
    {url: `/api/produto/ecommerce`, method: 'GET',
        params
    },
    );
  }



export const getGetApiProdutoEcommerceKey = (params: GetApiProdutoEcommerceParams,) => [`/api/produto/ecommerce`, ...(params ? [params]: [])] as const;

export type GetApiProdutoEcommerceQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoEcommerce>>>
export type GetApiProdutoEcommerceQueryError = ResponseError

/**
 * @summary Listar produtos e-commerce
 */
export const useGetApiProdutoEcommerce = <TError = ResponseError>(
  params: GetApiProdutoEcommerceParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoEcommerce>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoEcommerceKey(params) : null);
  const swrFn = () => getApiProdutoEcommerce(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir produto composto
 */
export const postApiProdutoComposto = (
    produtoCompostoDto: ProdutoCompostoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/produto/composto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: produtoCompostoDto
    },
    );
  }



export const getPostApiProdutoCompostoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ProdutoCompostoDto[] }): Promise<void> => {
    return postApiProdutoComposto(arg);
  }
}
export const getPostApiProdutoCompostoMutationKey = () => [`/api/produto/composto`] as const;

export type PostApiProdutoCompostoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProdutoComposto>>>
export type PostApiProdutoCompostoMutationError = ResponseError

/**
 * @summary Incluir produto composto
 */
export const usePostApiProdutoComposto = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiProdutoComposto>>, TError, Key, ProdutoCompostoDto[], Awaited<ReturnType<typeof postApiProdutoComposto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiProdutoCompostoMutationKey();
  const swrFn = getPostApiProdutoCompostoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar produto composto
 */
export const getApiProdutoComposto = (
    params: GetApiProdutoCompostoParams,
 ) => {
    return customInstance<ProdutoCompostoDto[]>(
    {url: `/api/produto/composto`, method: 'GET',
        params
    },
    );
  }



export const getGetApiProdutoCompostoKey = (params: GetApiProdutoCompostoParams,) => [`/api/produto/composto`, ...(params ? [params]: [])] as const;

export type GetApiProdutoCompostoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoComposto>>>
export type GetApiProdutoCompostoQueryError = ResponseError

/**
 * @summary Listar produto composto
 */
export const useGetApiProdutoComposto = <TError = ResponseError>(
  params: GetApiProdutoCompostoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoComposto>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoCompostoKey(params) : null);
  const swrFn = () => getApiProdutoComposto(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir produto composto
 */
export const deleteApiProdutoComposto = (
    params: DeleteApiProdutoCompostoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/produto/composto`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiProdutoCompostoMutationFetcher = (params: DeleteApiProdutoCompostoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiProdutoComposto(params);
  }
}
export const getDeleteApiProdutoCompostoMutationKey = (params: DeleteApiProdutoCompostoParams,) => [`/api/produto/composto`, ...(params ? [params]: [])] as const;

export type DeleteApiProdutoCompostoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProdutoComposto>>>
export type DeleteApiProdutoCompostoMutationError = ResponseError

/**
 * @summary Excluir produto composto
 */
export const useDeleteApiProdutoComposto = <TError = ResponseError>(
  params: DeleteApiProdutoCompostoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiProdutoComposto>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiProdutoComposto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiProdutoCompostoMutationKey(params);
  const swrFn = getDeleteApiProdutoCompostoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar marca
 */
export const getApiProdutoMarca = (
    
 ) => {
    return customInstance<ProdutoMarcaDto[]>(
    {url: `/api/produto/marca`, method: 'GET'
    },
    );
  }



export const getGetApiProdutoMarcaKey = () => [`/api/produto/marca`] as const;

export type GetApiProdutoMarcaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProdutoMarca>>>
export type GetApiProdutoMarcaQueryError = ResponseError

/**
 * @summary Listar marca
 */
export const useGetApiProdutoMarca = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiProdutoMarca>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiProdutoMarcaKey() : null);
  const swrFn = () => getApiProdutoMarca()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir Estoque
 */
export const postApiEstoque = (
    estoqueDto: EstoqueDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/estoque`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: estoqueDto
    },
    );
  }



export const getPostApiEstoqueMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: EstoqueDto[] }): Promise<void> => {
    return postApiEstoque(arg);
  }
}
export const getPostApiEstoqueMutationKey = () => [`/api/estoque`] as const;

export type PostApiEstoqueMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEstoque>>>
export type PostApiEstoqueMutationError = ResponseError

/**
 * @summary Incluir Estoque
 */
export const usePostApiEstoque = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiEstoque>>, TError, Key, EstoqueDto[], Awaited<ReturnType<typeof postApiEstoque>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiEstoqueMutationKey();
  const swrFn = getPostApiEstoqueMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar estoque
 */
export const getApiEstoque = (
    params: GetApiEstoqueParams,
 ) => {
    return customInstance<EstoqueDto>(
    {url: `/api/estoque`, method: 'GET',
        params
    },
    );
  }



export const getGetApiEstoqueKey = (params: GetApiEstoqueParams,) => [`/api/estoque`, ...(params ? [params]: [])] as const;

export type GetApiEstoqueQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEstoque>>>
export type GetApiEstoqueQueryError = ResponseError

/**
 * @summary Listar estoque
 */
export const useGetApiEstoque = <TError = ResponseError>(
  params: GetApiEstoqueParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiEstoque>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiEstoqueKey(params) : null);
  const swrFn = () => getApiEstoque(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir estoque 
 */
export const deleteApiEstoque = (
    params: DeleteApiEstoqueParams,
 ) => {
    return customInstance<void>(
    {url: `/api/estoque`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiEstoqueMutationFetcher = (params: DeleteApiEstoqueParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiEstoque(params);
  }
}
export const getDeleteApiEstoqueMutationKey = (params: DeleteApiEstoqueParams,) => [`/api/estoque`, ...(params ? [params]: [])] as const;

export type DeleteApiEstoqueMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiEstoque>>>
export type DeleteApiEstoqueMutationError = ResponseError

/**
 * @summary Excluir estoque 
 */
export const useDeleteApiEstoque = <TError = ResponseError>(
  params: DeleteApiEstoqueParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiEstoque>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiEstoque>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiEstoqueMutationKey(params);
  const swrFn = getDeleteApiEstoqueMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir pre√ßo
 */
export const postApiPreco = (
    produtoPrecoDto: ProdutoPrecoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/preco`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: produtoPrecoDto
    },
    );
  }



export const getPostApiPrecoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ProdutoPrecoDto[] }): Promise<void> => {
    return postApiPreco(arg);
  }
}
export const getPostApiPrecoMutationKey = () => [`/api/preco`] as const;

export type PostApiPrecoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPreco>>>
export type PostApiPrecoMutationError = ResponseError

/**
 * @summary Incluir pre√ßo
 */
export const usePostApiPreco = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPreco>>, TError, Key, ProdutoPrecoDto[], Awaited<ReturnType<typeof postApiPreco>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPrecoMutationKey();
  const swrFn = getPostApiPrecoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar pre√ßo
 */
export const getApiPreco = (
    params: GetApiPrecoParams,
 ) => {
    return customInstance<ProdutoPrecoDto[]>(
    {url: `/api/preco`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPrecoKey = (params: GetApiPrecoParams,) => [`/api/preco`, ...(params ? [params]: [])] as const;

export type GetApiPrecoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPreco>>>
export type GetApiPrecoQueryError = ResponseError

/**
 * @summary Listar pre√ßo
 */
export const useGetApiPreco = <TError = ResponseError>(
  params: GetApiPrecoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPreco>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPrecoKey(params) : null);
  const swrFn = () => getApiPreco(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir pre√ßo
 */
export const deleteApiPreco = (
    params: DeleteApiPrecoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/preco`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiPrecoMutationFetcher = (params: DeleteApiPrecoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiPreco(params);
  }
}
export const getDeleteApiPrecoMutationKey = (params: DeleteApiPrecoParams,) => [`/api/preco`, ...(params ? [params]: [])] as const;

export type DeleteApiPrecoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPreco>>>
export type DeleteApiPrecoMutationError = ResponseError

/**
 * @summary Excluir pre√ßo
 */
export const useDeleteApiPreco = <TError = ResponseError>(
  params: DeleteApiPrecoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiPreco>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiPreco>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiPrecoMutationKey(params);
  const swrFn = getDeleteApiPrecoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir tabela de pre√ßo
 */
export const postApiPrecoTabelapreco = (
    produtoTabPrecoDto: ProdutoTabPrecoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/preco/tabelapreco`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: produtoTabPrecoDto
    },
    );
  }



export const getPostApiPrecoTabelaprecoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: ProdutoTabPrecoDto[] }): Promise<void> => {
    return postApiPrecoTabelapreco(arg);
  }
}
export const getPostApiPrecoTabelaprecoMutationKey = () => [`/api/preco/tabelapreco`] as const;

export type PostApiPrecoTabelaprecoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPrecoTabelapreco>>>
export type PostApiPrecoTabelaprecoMutationError = ResponseError

/**
 * @summary Incluir tabela de pre√ßo
 */
export const usePostApiPrecoTabelapreco = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPrecoTabelapreco>>, TError, Key, ProdutoTabPrecoDto[], Awaited<ReturnType<typeof postApiPrecoTabelapreco>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPrecoTabelaprecoMutationKey();
  const swrFn = getPostApiPrecoTabelaprecoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar tabela de pre√ßo
 */
export const getApiPrecoTabelapreco = (
    params: GetApiPrecoTabelaprecoParams,
 ) => {
    return customInstance<ProdutoTabPrecoDto[]>(
    {url: `/api/preco/tabelapreco`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPrecoTabelaprecoKey = (params: GetApiPrecoTabelaprecoParams,) => [`/api/preco/tabelapreco`, ...(params ? [params]: [])] as const;

export type GetApiPrecoTabelaprecoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPrecoTabelapreco>>>
export type GetApiPrecoTabelaprecoQueryError = ResponseError

/**
 * @summary Listar tabela de pre√ßo
 */
export const useGetApiPrecoTabelapreco = <TError = ResponseError>(
  params: GetApiPrecoTabelaprecoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPrecoTabelapreco>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPrecoTabelaprecoKey(params) : null);
  const swrFn = () => getApiPrecoTabelapreco(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir tabela de pre√ßo
 */
export const deleteApiPrecoTabelapreco = (
    params: DeleteApiPrecoTabelaprecoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/preco/tabelapreco`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiPrecoTabelaprecoMutationFetcher = (params: DeleteApiPrecoTabelaprecoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiPrecoTabelapreco(params);
  }
}
export const getDeleteApiPrecoTabelaprecoMutationKey = (params: DeleteApiPrecoTabelaprecoParams,) => [`/api/preco/tabelapreco`, ...(params ? [params]: [])] as const;

export type DeleteApiPrecoTabelaprecoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPrecoTabelapreco>>>
export type DeleteApiPrecoTabelaprecoMutationError = ResponseError

/**
 * @summary Excluir tabela de pre√ßo
 */
export const useDeleteApiPrecoTabelapreco = <TError = ResponseError>(
  params: DeleteApiPrecoTabelaprecoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiPrecoTabelapreco>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiPrecoTabelapreco>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiPrecoTabelaprecoMutationKey(params);
  const swrFn = getDeleteApiPrecoTabelaprecoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir empresas da promo√ß√£o
 */
export const postApiPromocaoEmpresa = (
    promocaoEmpresaDto: PromocaoEmpresaDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/promocao/empresa`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: promocaoEmpresaDto
    },
    );
  }



export const getPostApiPromocaoEmpresaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: PromocaoEmpresaDto[] }): Promise<void> => {
    return postApiPromocaoEmpresa(arg);
  }
}
export const getPostApiPromocaoEmpresaMutationKey = () => [`/api/promocao/empresa`] as const;

export type PostApiPromocaoEmpresaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPromocaoEmpresa>>>
export type PostApiPromocaoEmpresaMutationError = ResponseError

/**
 * @summary Incluir empresas da promo√ß√£o
 */
export const usePostApiPromocaoEmpresa = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPromocaoEmpresa>>, TError, Key, PromocaoEmpresaDto[], Awaited<ReturnType<typeof postApiPromocaoEmpresa>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPromocaoEmpresaMutationKey();
  const swrFn = getPostApiPromocaoEmpresaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir empresas da promo√ß√£o
 */
export const deleteApiPromocaoEmpresa = (
    params: DeleteApiPromocaoEmpresaParams,
 ) => {
    return customInstance<void>(
    {url: `/api/promocao/empresa`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiPromocaoEmpresaMutationFetcher = (params: DeleteApiPromocaoEmpresaParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiPromocaoEmpresa(params);
  }
}
export const getDeleteApiPromocaoEmpresaMutationKey = (params: DeleteApiPromocaoEmpresaParams,) => [`/api/promocao/empresa`, ...(params ? [params]: [])] as const;

export type DeleteApiPromocaoEmpresaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPromocaoEmpresa>>>
export type DeleteApiPromocaoEmpresaMutationError = ResponseError

/**
 * @summary Excluir empresas da promo√ß√£o
 */
export const useDeleteApiPromocaoEmpresa = <TError = ResponseError>(
  params: DeleteApiPromocaoEmpresaParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiPromocaoEmpresa>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiPromocaoEmpresa>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiPromocaoEmpresaMutationKey(params);
  const swrFn = getDeleteApiPromocaoEmpresaMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir produtos da promo√ß√£o
 */
export const postApiPromocaoProduto = (
    promocaoProdutoDto: PromocaoProdutoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/promocao/produto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: promocaoProdutoDto
    },
    );
  }



export const getPostApiPromocaoProdutoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: PromocaoProdutoDto[] }): Promise<void> => {
    return postApiPromocaoProduto(arg);
  }
}
export const getPostApiPromocaoProdutoMutationKey = () => [`/api/promocao/produto`] as const;

export type PostApiPromocaoProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPromocaoProduto>>>
export type PostApiPromocaoProdutoMutationError = ResponseError

/**
 * @summary Incluir produtos da promo√ß√£o
 */
export const usePostApiPromocaoProduto = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPromocaoProduto>>, TError, Key, PromocaoProdutoDto[], Awaited<ReturnType<typeof postApiPromocaoProduto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPromocaoProdutoMutationKey();
  const swrFn = getPostApiPromocaoProdutoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir produtos da promo√ß√£o
 */
export const deleteApiPromocaoProduto = (
    params: DeleteApiPromocaoProdutoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/promocao/produto`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiPromocaoProdutoMutationFetcher = (params: DeleteApiPromocaoProdutoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiPromocaoProduto(params);
  }
}
export const getDeleteApiPromocaoProdutoMutationKey = (params: DeleteApiPromocaoProdutoParams,) => [`/api/promocao/produto`, ...(params ? [params]: [])] as const;

export type DeleteApiPromocaoProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPromocaoProduto>>>
export type DeleteApiPromocaoProdutoMutationError = ResponseError

/**
 * @summary Excluir produtos da promo√ß√£o
 */
export const useDeleteApiPromocaoProduto = <TError = ResponseError>(
  params: DeleteApiPromocaoProdutoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiPromocaoProduto>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiPromocaoProduto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiPromocaoProdutoMutationKey(params);
  const swrFn = getDeleteApiPromocaoProdutoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir condi√ß√£o de pagamento da promo√ß√£o
 */
export const postApiPromocaoCondpgto = (
    promocaoCondPgtoDto: PromocaoCondPgtoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/promocao/condpgto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: promocaoCondPgtoDto
    },
    );
  }



export const getPostApiPromocaoCondpgtoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: PromocaoCondPgtoDto[] }): Promise<void> => {
    return postApiPromocaoCondpgto(arg);
  }
}
export const getPostApiPromocaoCondpgtoMutationKey = () => [`/api/promocao/condpgto`] as const;

export type PostApiPromocaoCondpgtoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPromocaoCondpgto>>>
export type PostApiPromocaoCondpgtoMutationError = ResponseError

/**
 * @summary Incluir condi√ß√£o de pagamento da promo√ß√£o
 */
export const usePostApiPromocaoCondpgto = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPromocaoCondpgto>>, TError, Key, PromocaoCondPgtoDto[], Awaited<ReturnType<typeof postApiPromocaoCondpgto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPromocaoCondpgtoMutationKey();
  const swrFn = getPostApiPromocaoCondpgtoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir condi√ß√£o de pagamento da promo√ß√£o
 */
export const deleteApiPromocaoCondpgto = (
    params: DeleteApiPromocaoCondpgtoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/promocao/condpgto`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiPromocaoCondpgtoMutationFetcher = (params: DeleteApiPromocaoCondpgtoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiPromocaoCondpgto(params);
  }
}
export const getDeleteApiPromocaoCondpgtoMutationKey = (params: DeleteApiPromocaoCondpgtoParams,) => [`/api/promocao/condpgto`, ...(params ? [params]: [])] as const;

export type DeleteApiPromocaoCondpgtoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPromocaoCondpgto>>>
export type DeleteApiPromocaoCondpgtoMutationError = ResponseError

/**
 * @summary Excluir condi√ß√£o de pagamento da promo√ß√£o
 */
export const useDeleteApiPromocaoCondpgto = <TError = ResponseError>(
  params: DeleteApiPromocaoCondpgtoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiPromocaoCondpgto>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiPromocaoCondpgto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiPromocaoCondpgtoMutationKey(params);
  const swrFn = getDeleteApiPromocaoCondpgtoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar produtos em promo√ß√£o do E-commerce
 */
export const getApiPromocaoEcommerce = (
    params: GetApiPromocaoEcommerceParams,
 ) => {
    return customInstance<ProdutosEmPromocaoEcommerceDto[]>(
    {url: `/api/promocao/ecommerce`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPromocaoEcommerceKey = (params: GetApiPromocaoEcommerceParams,) => [`/api/promocao/ecommerce`, ...(params ? [params]: [])] as const;

export type GetApiPromocaoEcommerceQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPromocaoEcommerce>>>
export type GetApiPromocaoEcommerceQueryError = ResponseError

/**
 * @summary Listar produtos em promo√ß√£o do E-commerce
 */
export const useGetApiPromocaoEcommerce = <TError = ResponseError>(
  params: GetApiPromocaoEcommerceParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPromocaoEcommerce>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPromocaoEcommerceKey(params) : null);
  const swrFn = () => getApiPromocaoEcommerce(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir promo√ß√£o
 */
export const postApiPromocao = (
    promocaoDto: PromocaoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/promocao`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: promocaoDto
    },
    );
  }



export const getPostApiPromocaoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: PromocaoDto[] }): Promise<void> => {
    return postApiPromocao(arg);
  }
}
export const getPostApiPromocaoMutationKey = () => [`/api/promocao`] as const;

export type PostApiPromocaoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPromocao>>>
export type PostApiPromocaoMutationError = ResponseError

/**
 * @summary Incluir promo√ß√£o
 */
export const usePostApiPromocao = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiPromocao>>, TError, Key, PromocaoDto[], Awaited<ReturnType<typeof postApiPromocao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiPromocaoMutationKey();
  const swrFn = getPostApiPromocaoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar produtos em promo√ß√£o
 */
export const getApiPromocao = (
    params: GetApiPromocaoParams,
 ) => {
    return customInstance<ProdutoEmPromocaoDto[]>(
    {url: `/api/promocao`, method: 'GET',
        params
    },
    );
  }



export const getGetApiPromocaoKey = (params: GetApiPromocaoParams,) => [`/api/promocao`, ...(params ? [params]: [])] as const;

export type GetApiPromocaoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPromocao>>>
export type GetApiPromocaoQueryError = ResponseError

/**
 * @summary Listar produtos em promo√ß√£o
 */
export const useGetApiPromocao = <TError = ResponseError>(
  params: GetApiPromocaoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiPromocao>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiPromocaoKey(params) : null);
  const swrFn = () => getApiPromocao(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir promo√ß√£o
 */
export const deleteApiPromocao = (
    params: DeleteApiPromocaoParams,
 ) => {
    return customInstance<void>(
    {url: `/api/promocao`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiPromocaoMutationFetcher = (params: DeleteApiPromocaoParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiPromocao(params);
  }
}
export const getDeleteApiPromocaoMutationKey = (params: DeleteApiPromocaoParams,) => [`/api/promocao`, ...(params ? [params]: [])] as const;

export type DeleteApiPromocaoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPromocao>>>
export type DeleteApiPromocaoMutationError = ResponseError

/**
 * @summary Excluir promo√ß√£o
 */
export const useDeleteApiPromocao = <TError = ResponseError>(
  params: DeleteApiPromocaoParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiPromocao>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiPromocao>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiPromocaoMutationKey(params);
  const swrFn = getDeleteApiPromocaoMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar sugestao de venda do produto
 */
export const getApiSugestaoVendaDoproduto = (
    params: GetApiSugestaoVendaDoprodutoParams,
 ) => {
    return customInstance<SugestaoVendaProdutoLeituraDto[]>(
    {url: `/api/sugestao/venda/doproduto`, method: 'GET',
        params
    },
    );
  }



export const getGetApiSugestaoVendaDoprodutoKey = (params: GetApiSugestaoVendaDoprodutoParams,) => [`/api/sugestao/venda/doproduto`, ...(params ? [params]: [])] as const;

export type GetApiSugestaoVendaDoprodutoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSugestaoVendaDoproduto>>>
export type GetApiSugestaoVendaDoprodutoQueryError = ResponseError

/**
 * @summary Listar sugestao de venda do produto
 */
export const useGetApiSugestaoVendaDoproduto = <TError = ResponseError>(
  params: GetApiSugestaoVendaDoprodutoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiSugestaoVendaDoproduto>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiSugestaoVendaDoprodutoKey(params) : null);
  const swrFn = () => getApiSugestaoVendaDoproduto(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir sugestao de venda
 */
export const postApiSugestaoVenda = (
    sugestaoVendaDto: SugestaoVendaDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/sugestao/venda`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sugestaoVendaDto
    },
    );
  }



export const getPostApiSugestaoVendaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: SugestaoVendaDto[] }): Promise<void> => {
    return postApiSugestaoVenda(arg);
  }
}
export const getPostApiSugestaoVendaMutationKey = () => [`/api/sugestao/venda`] as const;

export type PostApiSugestaoVendaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSugestaoVenda>>>
export type PostApiSugestaoVendaMutationError = ResponseError

/**
 * @summary Incluir sugestao de venda
 */
export const usePostApiSugestaoVenda = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiSugestaoVenda>>, TError, Key, SugestaoVendaDto[], Awaited<ReturnType<typeof postApiSugestaoVenda>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiSugestaoVendaMutationKey();
  const swrFn = getPostApiSugestaoVendaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Exclus√£o completa da sugestao de venda
 */
export const deleteApiSugestaoVenda = (
    
 ) => {
    return customInstance<void>(
    {url: `/api/sugestao/venda`, method: 'DELETE'
    },
    );
  }



export const getDeleteApiSugestaoVendaMutationFetcher = ( ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiSugestaoVenda();
  }
}
export const getDeleteApiSugestaoVendaMutationKey = () => [`/api/sugestao/venda`] as const;

export type DeleteApiSugestaoVendaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiSugestaoVenda>>>
export type DeleteApiSugestaoVendaMutationError = ResponseError

/**
 * @summary Exclus√£o completa da sugestao de venda
 */
export const useDeleteApiSugestaoVenda = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiSugestaoVenda>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiSugestaoVenda>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiSugestaoVendaMutationKey();
  const swrFn = getDeleteApiSugestaoVendaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar cadastro de sugestao de venda
 */
export const getApiSugestaoVenda = (
    params?: GetApiSugestaoVendaParams,
 ) => {
    return customInstance<SugestaoVendaDto[]>(
    {url: `/api/sugestao/venda`, method: 'GET',
        params
    },
    );
  }



export const getGetApiSugestaoVendaKey = (params?: GetApiSugestaoVendaParams,) => [`/api/sugestao/venda`, ...(params ? [params]: [])] as const;

export type GetApiSugestaoVendaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSugestaoVenda>>>
export type GetApiSugestaoVendaQueryError = ResponseError

/**
 * @summary Listar cadastro de sugestao de venda
 */
export const useGetApiSugestaoVenda = <TError = ResponseError>(
  params?: GetApiSugestaoVendaParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiSugestaoVenda>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiSugestaoVendaKey(params) : null);
  const swrFn = () => getApiSugestaoVenda(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir grupo e subgrupo da sugestao de venda
 */
export const postApiSugestaoVendaSubgrupo = (
    sugestaoVendaSubGrupoDto: SugestaoVendaSubGrupoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/sugestao/venda/subgrupo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sugestaoVendaSubGrupoDto
    },
    );
  }



export const getPostApiSugestaoVendaSubgrupoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: SugestaoVendaSubGrupoDto[] }): Promise<void> => {
    return postApiSugestaoVendaSubgrupo(arg);
  }
}
export const getPostApiSugestaoVendaSubgrupoMutationKey = () => [`/api/sugestao/venda/subgrupo`] as const;

export type PostApiSugestaoVendaSubgrupoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSugestaoVendaSubgrupo>>>
export type PostApiSugestaoVendaSubgrupoMutationError = ResponseError

/**
 * @summary Incluir grupo e subgrupo da sugestao de venda
 */
export const usePostApiSugestaoVendaSubgrupo = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiSugestaoVendaSubgrupo>>, TError, Key, SugestaoVendaSubGrupoDto[], Awaited<ReturnType<typeof postApiSugestaoVendaSubgrupo>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiSugestaoVendaSubgrupoMutationKey();
  const swrFn = getPostApiSugestaoVendaSubgrupoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar cadastro de subgrupo de sugestao de venda 
 */
export const getApiSugestaoVendaSubgrupo = (
    params?: GetApiSugestaoVendaSubgrupoParams,
 ) => {
    return customInstance<SugestaoVendaSubGrupoDto[]>(
    {url: `/api/sugestao/venda/subgrupo`, method: 'GET',
        params
    },
    );
  }



export const getGetApiSugestaoVendaSubgrupoKey = (params?: GetApiSugestaoVendaSubgrupoParams,) => [`/api/sugestao/venda/subgrupo`, ...(params ? [params]: [])] as const;

export type GetApiSugestaoVendaSubgrupoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSugestaoVendaSubgrupo>>>
export type GetApiSugestaoVendaSubgrupoQueryError = ResponseError

/**
 * @summary Listar cadastro de subgrupo de sugestao de venda 
 */
export const useGetApiSugestaoVendaSubgrupo = <TError = ResponseError>(
  params?: GetApiSugestaoVendaSubgrupoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiSugestaoVendaSubgrupo>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiSugestaoVendaSubgrupoKey(params) : null);
  const swrFn = () => getApiSugestaoVendaSubgrupo(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir produto da sugestao de venda
 */
export const postApiSugestaoVendaProduto = (
    sugestaoVendaProdutoDto: SugestaoVendaProdutoDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/sugestao/venda/produto`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sugestaoVendaProdutoDto
    },
    );
  }



export const getPostApiSugestaoVendaProdutoMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: SugestaoVendaProdutoDto[] }): Promise<void> => {
    return postApiSugestaoVendaProduto(arg);
  }
}
export const getPostApiSugestaoVendaProdutoMutationKey = () => [`/api/sugestao/venda/produto`] as const;

export type PostApiSugestaoVendaProdutoMutationResult = NonNullable<Awaited<ReturnType<typeof postApiSugestaoVendaProduto>>>
export type PostApiSugestaoVendaProdutoMutationError = ResponseError

/**
 * @summary Incluir produto da sugestao de venda
 */
export const usePostApiSugestaoVendaProduto = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiSugestaoVendaProduto>>, TError, Key, SugestaoVendaProdutoDto[], Awaited<ReturnType<typeof postApiSugestaoVendaProduto>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiSugestaoVendaProdutoMutationKey();
  const swrFn = getPostApiSugestaoVendaProdutoMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar cadastro dos produtos de sugestao de venda 
 */
export const getApiSugestaoVendaProduto = (
    params?: GetApiSugestaoVendaProdutoParams,
 ) => {
    return customInstance<SugestaoVendaProdutoDto[]>(
    {url: `/api/sugestao/venda/produto`, method: 'GET',
        params
    },
    );
  }



export const getGetApiSugestaoVendaProdutoKey = (params?: GetApiSugestaoVendaProdutoParams,) => [`/api/sugestao/venda/produto`, ...(params ? [params]: [])] as const;

export type GetApiSugestaoVendaProdutoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSugestaoVendaProduto>>>
export type GetApiSugestaoVendaProdutoQueryError = ResponseError

/**
 * @summary Listar cadastro dos produtos de sugestao de venda 
 */
export const useGetApiSugestaoVendaProduto = <TError = ResponseError>(
  params?: GetApiSugestaoVendaProdutoParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiSugestaoVendaProduto>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiSugestaoVendaProdutoKey(params) : null);
  const swrFn = () => getApiSugestaoVendaProduto(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir transportadora
 */
export const postApiTransportadora = (
    transportadoraCadDto: TransportadoraCadDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/transportadora`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: transportadoraCadDto
    },
    );
  }



export const getPostApiTransportadoraMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: TransportadoraCadDto[] }): Promise<void> => {
    return postApiTransportadora(arg);
  }
}
export const getPostApiTransportadoraMutationKey = () => [`/api/transportadora`] as const;

export type PostApiTransportadoraMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTransportadora>>>
export type PostApiTransportadoraMutationError = ResponseError

/**
 * @summary Incluir transportadora
 */
export const usePostApiTransportadora = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiTransportadora>>, TError, Key, TransportadoraCadDto[], Awaited<ReturnType<typeof postApiTransportadora>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiTransportadoraMutationKey();
  const swrFn = getPostApiTransportadoraMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar transportadora por contrato
 */
export const getApiTransportadora = (
    
 ) => {
    return customInstance<TransportadoraDto>(
    {url: `/api/transportadora`, method: 'GET'
    },
    );
  }



export const getGetApiTransportadoraKey = () => [`/api/transportadora`] as const;

export type GetApiTransportadoraQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTransportadora>>>
export type GetApiTransportadoraQueryError = ResponseError

/**
 * @summary Listar transportadora por contrato
 */
export const useGetApiTransportadora = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiTransportadora>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiTransportadoraKey() : null);
  const swrFn = () => getApiTransportadora()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir transportadora
 */
export const deleteApiTransportadora = (
    params: DeleteApiTransportadoraParams,
 ) => {
    return customInstance<void>(
    {url: `/api/transportadora`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiTransportadoraMutationFetcher = (params: DeleteApiTransportadoraParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiTransportadora(params);
  }
}
export const getDeleteApiTransportadoraMutationKey = (params: DeleteApiTransportadoraParams,) => [`/api/transportadora`, ...(params ? [params]: [])] as const;

export type DeleteApiTransportadoraMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTransportadora>>>
export type DeleteApiTransportadoraMutationError = ResponseError

/**
 * @summary Excluir transportadora
 */
export const useDeleteApiTransportadora = <TError = ResponseError>(
  params: DeleteApiTransportadoraParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiTransportadora>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiTransportadora>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiTransportadoraMutationKey(params);
  const swrFn = getDeleteApiTransportadoraMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar usu√°rio e-commerce
 */
export const getApiUsuarioEcommerce = (
    
 ) => {
    return customInstance<UsuarioSuporteDto[]>(
    {url: `/api/usuario/ecommerce`, method: 'GET'
    },
    );
  }



export const getGetApiUsuarioEcommerceKey = () => [`/api/usuario/ecommerce`] as const;

export type GetApiUsuarioEcommerceQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsuarioEcommerce>>>
export type GetApiUsuarioEcommerceQueryError = ResponseError

/**
 * @summary Listar usu√°rio e-commerce
 */
export const useGetApiUsuarioEcommerce = <TError = ResponseError>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiUsuarioEcommerce>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiUsuarioEcommerceKey() : null);
  const swrFn = () => getApiUsuarioEcommerce()

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir usu√°rio
 */
export const postApiUsuario = (
    usuarioDto: UsuarioDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/usuario`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: usuarioDto
    },
    );
  }



export const getPostApiUsuarioMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: UsuarioDto[] }): Promise<void> => {
    return postApiUsuario(arg);
  }
}
export const getPostApiUsuarioMutationKey = () => [`/api/usuario`] as const;

export type PostApiUsuarioMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsuario>>>
export type PostApiUsuarioMutationError = ResponseError

/**
 * @summary Incluir usu√°rio
 */
export const usePostApiUsuario = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiUsuario>>, TError, Key, UsuarioDto[], Awaited<ReturnType<typeof postApiUsuario>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiUsuarioMutationKey();
  const swrFn = getPostApiUsuarioMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Buscar por usu√°rio
 */
export const getApiUsuario = (
    params: GetApiUsuarioParams,
 ) => {
    return customInstance<UsuarioDto>(
    {url: `/api/usuario`, method: 'GET',
        params
    },
    );
  }



export const getGetApiUsuarioKey = (params: GetApiUsuarioParams,) => [`/api/usuario`, ...(params ? [params]: [])] as const;

export type GetApiUsuarioQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsuario>>>
export type GetApiUsuarioQueryError = ResponseError

/**
 * @summary Buscar por usu√°rio
 */
export const useGetApiUsuario = <TError = ResponseError>(
  params: GetApiUsuarioParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiUsuario>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiUsuarioKey(params) : null);
  const swrFn = () => getApiUsuario(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir usu√°rio
 */
export const deleteApiUsuario = (
    params: DeleteApiUsuarioParams,
 ) => {
    return customInstance<void>(
    {url: `/api/usuario`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiUsuarioMutationFetcher = (params: DeleteApiUsuarioParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiUsuario(params);
  }
}
export const getDeleteApiUsuarioMutationKey = (params: DeleteApiUsuarioParams,) => [`/api/usuario`, ...(params ? [params]: [])] as const;

export type DeleteApiUsuarioMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsuario>>>
export type DeleteApiUsuarioMutationError = ResponseError

/**
 * @summary Excluir usu√°rio
 */
export const useDeleteApiUsuario = <TError = ResponseError>(
  params: DeleteApiUsuarioParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiUsuario>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiUsuario>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiUsuarioMutationKey(params);
  const swrFn = getDeleteApiUsuarioMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Ativar usu√°rio
 */
export const putApiUsuarioAtivar = (
    params: PutApiUsuarioAtivarParams,
 ) => {
    return customInstance<void>(
    {url: `/api/usuario/ativar`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiUsuarioAtivarMutationFetcher = (params: PutApiUsuarioAtivarParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiUsuarioAtivar(params);
  }
}
export const getPutApiUsuarioAtivarMutationKey = (params: PutApiUsuarioAtivarParams,) => [`/api/usuario/ativar`, ...(params ? [params]: [])] as const;

export type PutApiUsuarioAtivarMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsuarioAtivar>>>
export type PutApiUsuarioAtivarMutationError = void | ResponseError

/**
 * @summary Ativar usu√°rio
 */
export const usePutApiUsuarioAtivar = <TError = void | ResponseError>(
  params: PutApiUsuarioAtivarParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiUsuarioAtivar>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiUsuarioAtivar>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiUsuarioAtivarMutationKey(params);
  const swrFn = getPutApiUsuarioAtivarMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Desativar usu√°rio
 */
export const putApiUsuarioDesativar = (
    params: PutApiUsuarioDesativarParams,
 ) => {
    return customInstance<void>(
    {url: `/api/usuario/desativar`, method: 'PUT',
        params
    },
    );
  }



export const getPutApiUsuarioDesativarMutationFetcher = (params: PutApiUsuarioDesativarParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return putApiUsuarioDesativar(params);
  }
}
export const getPutApiUsuarioDesativarMutationKey = (params: PutApiUsuarioDesativarParams,) => [`/api/usuario/desativar`, ...(params ? [params]: [])] as const;

export type PutApiUsuarioDesativarMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsuarioDesativar>>>
export type PutApiUsuarioDesativarMutationError = void | ResponseError

/**
 * @summary Desativar usu√°rio
 */
export const usePutApiUsuarioDesativar = <TError = void | ResponseError>(
  params: PutApiUsuarioDesativarParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putApiUsuarioDesativar>>, TError, Key, Arguments, Awaited<ReturnType<typeof putApiUsuarioDesativar>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutApiUsuarioDesativarMutationKey(params);
  const swrFn = getPutApiUsuarioDesativarMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar empresas que o usu√°rio tem acesso
 */
export const getApiUsuarioEmpresas = (
    params: GetApiUsuarioEmpresasParams,
 ) => {
    return customInstance<UsuarioEmpresasDto>(
    {url: `/api/usuario/empresas`, method: 'GET',
        params
    },
    );
  }



export const getGetApiUsuarioEmpresasKey = (params: GetApiUsuarioEmpresasParams,) => [`/api/usuario/empresas`, ...(params ? [params]: [])] as const;

export type GetApiUsuarioEmpresasQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsuarioEmpresas>>>
export type GetApiUsuarioEmpresasQueryError = ResponseError

/**
 * @summary Listar empresas que o usu√°rio tem acesso
 */
export const useGetApiUsuarioEmpresas = <TError = ResponseError>(
  params: GetApiUsuarioEmpresasParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiUsuarioEmpresas>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiUsuarioEmpresasKey(params) : null);
  const swrFn = () => getApiUsuarioEmpresas(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Incluir meta
 */
export const postApiVendedorMeta = (
    vendedorMetaDto: VendedorMetaDto[],
 ) => {
    return customInstance<void>(
    {url: `/api/vendedor/meta`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vendedorMetaDto
    },
    );
  }



export const getPostApiVendedorMetaMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: VendedorMetaDto[] }): Promise<void> => {
    return postApiVendedorMeta(arg);
  }
}
export const getPostApiVendedorMetaMutationKey = () => [`/api/vendedor/meta`] as const;

export type PostApiVendedorMetaMutationResult = NonNullable<Awaited<ReturnType<typeof postApiVendedorMeta>>>
export type PostApiVendedorMetaMutationError = ResponseError

/**
 * @summary Incluir meta
 */
export const usePostApiVendedorMeta = <TError = ResponseError>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiVendedorMeta>>, TError, Key, VendedorMetaDto[], Awaited<ReturnType<typeof postApiVendedorMeta>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiVendedorMetaMutationKey();
  const swrFn = getPostApiVendedorMetaMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Listar meta do vendedor
 */
export const getApiVendedorMeta = (
    params: GetApiVendedorMetaParams,
 ) => {
    return customInstance<VendedorMetaDto[]>(
    {url: `/api/vendedor/meta`, method: 'GET',
        params
    },
    );
  }



export const getGetApiVendedorMetaKey = (params: GetApiVendedorMetaParams,) => [`/api/vendedor/meta`, ...(params ? [params]: [])] as const;

export type GetApiVendedorMetaQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVendedorMeta>>>
export type GetApiVendedorMetaQueryError = ResponseError

/**
 * @summary Listar meta do vendedor
 */
export const useGetApiVendedorMeta = <TError = ResponseError>(
  params: GetApiVendedorMetaParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiVendedorMeta>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiVendedorMetaKey(params) : null);
  const swrFn = () => getApiVendedorMeta(params)

  const query = useSWR<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Excluir meta do vendedor
 */
export const deleteApiVendedorMeta = (
    params: DeleteApiVendedorMetaParams,
 ) => {
    return customInstance<void>(
    {url: `/api/vendedor/meta`, method: 'DELETE',
        params
    },
    );
  }



export const getDeleteApiVendedorMetaMutationFetcher = (params: DeleteApiVendedorMetaParams, ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteApiVendedorMeta(params);
  }
}
export const getDeleteApiVendedorMetaMutationKey = (params: DeleteApiVendedorMetaParams,) => [`/api/vendedor/meta`, ...(params ? [params]: [])] as const;

export type DeleteApiVendedorMetaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiVendedorMeta>>>
export type DeleteApiVendedorMetaMutationError = ResponseError

/**
 * @summary Excluir meta do vendedor
 */
export const useDeleteApiVendedorMeta = <TError = ResponseError>(
  params: DeleteApiVendedorMetaParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteApiVendedorMeta>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteApiVendedorMeta>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteApiVendedorMetaMutationKey(params);
  const swrFn = getDeleteApiVendedorMetaMutationFetcher(params);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

